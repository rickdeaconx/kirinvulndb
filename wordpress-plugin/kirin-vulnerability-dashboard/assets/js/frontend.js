/**
 * Kirin Vulnerability Dashboard - WordPress Frontend JavaScript
 * Copyright Â© 2025 Rick Deacon, Knostic AI - https://knostic.ai
 * All Rights Reserved
 */

(function($) {
    'use strict';

    /**
     * Kirin VulnDB Frontend Class
     */
    class KirinVulnDB {
        constructor() {
            this.apiEndpoint = kirinVuln.apiEndpoint;
            this.apiKey = kirinVuln.apiKey;
            this.init();
        }

        init() {
            this.bindEvents();
            this.initializeWidgets();
            this.startAutoRefresh();
        }

        bindEvents() {
            // Refresh buttons
            $(document).on('click', '.kirin-refresh-btn', (e) => {
                e.preventDefault();
                this.refreshWidget($(e.target).closest('.kirin-widget'));
            });

            // Severity filter changes
            $(document).on('change', '.kirin-severity-filter', (e) => {
                this.filterBySeverity($(e.target));
            });

            // Tool filter changes
            $(document).on('change', '.kirin-tool-filter', (e) => {
                this.filterByTool($(e.target));
            });
        }

        initializeWidgets() {
            $('.kirin-vulnerabilities[data-auto-load="true"]').each((index, element) => {
                this.loadVulnerabilities($(element));
            });

            $('.kirin-stats[data-auto-load="true"]').each((index, element) => {
                this.loadStats($(element));
            });

            $('.kirin-alerts[data-auto-load="true"]').each((index, element) => {
                this.loadAlerts($(element));
            });
        }

        async loadVulnerabilities($container) {
            const params = this.getWidgetParams($container);
            
            try {
                this.showLoading($container);
                
                const response = await this.apiRequest('/wordpress/embed/vulnerabilities', {
                    limit: params.limit || 5,
                    severity: params.severity || '',
                    tool: params.tool || '',
                    format: 'json'
                });

                if (response && response.vulnerabilities) {
                    this.renderVulnerabilities($container, response.vulnerabilities, params);
                } else {
                    this.showError($container, 'No vulnerabilities found');
                }
            } catch (error) {
                console.error('Failed to load vulnerabilities:', error);
                this.showError($container, 'Failed to load vulnerabilities: ' + error.message);
            }
        }

        async loadStats($container) {
            try {
                this.showLoading($container);
                
                const response = await this.apiRequest('/wordpress/embed/stats');
                
                if (response && response.stats) {
                    this.renderStats($container, response.stats);
                } else {
                    this.showError($container, 'No statistics available');
                }
            } catch (error) {
                console.error('Failed to load stats:', error);
                this.showError($container, 'Failed to load statistics: ' + error.message);
            }
        }

        async loadAlerts($container) {
            const params = this.getWidgetParams($container);
            
            try {
                this.showLoading($container);
                
                const response = await this.apiRequest('/wordpress/embed/alerts', {
                    limit: params.limit || 3
                });

                if (response && response.alerts) {
                    this.renderAlerts($container, response.alerts);
                } else {
                    this.showError($container, 'No alerts available');
                }
            } catch (error) {
                console.error('Failed to load alerts:', error);
                this.showError($container, 'Failed to load alerts: ' + error.message);
            }
        }

        async apiRequest(endpoint, params = {}) {
            const url = new URL(this.apiEndpoint + endpoint);
            
            // Add parameters to URL
            Object.keys(params).forEach(key => {
                if (params[key]) {
                    url.searchParams.append(key, params[key]);
                }
            });

            const response = await fetch(url, {
                method: 'GET',
                headers: {
                    'X-API-Key': this.apiKey,
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            return await response.json();
        }

        renderVulnerabilities($container, vulnerabilities, params) {
            if (!vulnerabilities || vulnerabilities.length === 0) {
                $container.html('<div class="kirin-no-data">No vulnerabilities found</div>');
                return;
            }

            const theme = params.theme || 'light';
            let html = `<div class="kirin-vulnerabilities kirin-theme-${theme}">`;
            
            vulnerabilities.forEach(vuln => {
                const severityClass = `severity-${vuln.severity.toLowerCase()}`;
                const cveId = vuln.cve_id || vuln.vulnerability_id || 'N/A';
                const cvssScore = vuln.cvss_score || 'N/A';
                const patchStatus = vuln.patch_status.replace('_', ' ');
                const createdDate = new Date(vuln.created_at).toLocaleDateString();

                html += `
                    <div class="kirin-vuln-item ${severityClass}">
                        <div class="kirin-vuln-header">
                            <span class="kirin-vuln-id">${this.escapeHtml(cveId)}</span>
                            <span class="kirin-vuln-severity">${this.escapeHtml(vuln.severity)}</span>
                        </div>
                        <div class="kirin-vuln-title">${this.escapeHtml(vuln.title)}</div>
                        <div class="kirin-vuln-meta">
                            <span>CVSS: ${this.escapeHtml(cvssScore)}</span>
                            <span>Status: ${this.escapeHtml(patchStatus)}</span>
                            <span>${createdDate}</span>
                        </div>
                    </div>
                `;
            });
            
            html += '</div>';
            $container.html(html);
        }

        renderStats($container, stats) {
            const html = `
                <div class="kirin-stats">
                    <div class="kirin-stat-item stat-critical">
                        <div class="kirin-stat-value">${stats.critical_vulnerabilities || 0}</div>
                        <div class="kirin-stat-label">Critical</div>
                    </div>
                    <div class="kirin-stat-item stat-high">
                        <div class="kirin-stat-value">${stats.high_vulnerabilities || 0}</div>
                        <div class="kirin-stat-label">High</div>
                    </div>
                    <div class="kirin-stat-item stat-total">
                        <div class="kirin-stat-value">${stats.total_vulnerabilities || 0}</div>
                        <div class="kirin-stat-label">Total</div>
                    </div>
                    <div class="kirin-stat-item stat-recent">
                        <div class="kirin-stat-value">${stats.recent_vulnerabilities || 0}</div>
                        <div class="kirin-stat-label">Recent</div>
                    </div>
                </div>
            `;
            $container.html(html);
        }

        renderAlerts($container, alerts) {
            if (!alerts || alerts.length === 0) {
                $container.html('<div class="kirin-no-alerts">No critical alerts</div>');
                return;
            }

            let html = '<div class="kirin-alerts">';
            
            alerts.forEach(alert => {
                const discoveryDate = alert.discovery_date ? 
                    new Date(alert.discovery_date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }) : 
                    'Unknown';

                html += `
                    <div class="kirin-alert-item">
                        <div class="kirin-alert-header">
                            <span class="kirin-alert-severity">${this.escapeHtml(alert.severity)}</span>
                            <span class="kirin-alert-date">${discoveryDate}</span>
                        </div>
                        <div class="kirin-alert-title">${this.escapeHtml(alert.title)}</div>
                        <div class="kirin-alert-id">${this.escapeHtml(alert.id)}</div>
                    </div>
                `;
            });
            
            html += '</div>';
            $container.html(html);
        }

        getWidgetParams($container) {
            const data = $container.data();
            return {
                limit: data.limit,
                severity: data.severity,
                tool: data.tool,
                theme: data.theme
            };
        }

        showLoading($container) {
            $container.html('<div class="kirin-loading">Loading...</div>');
        }

        showError($container, message) {
            $container.html(`<div class="kirin-error">${this.escapeHtml(message)}</div>`);
        }

        refreshWidget($widget) {
            if ($widget.hasClass('kirin-vulnerabilities')) {
                this.loadVulnerabilities($widget);
            } else if ($widget.hasClass('kirin-stats')) {
                this.loadStats($widget);
            } else if ($widget.hasClass('kirin-alerts')) {
                this.loadAlerts($widget);
            }
        }

        filterBySeverity($select) {
            const severity = $select.val();
            const $container = $select.closest('.kirin-widget').find('.kirin-vulnerabilities');
            $container.data('severity', severity);
            this.loadVulnerabilities($container);
        }

        filterByTool($select) {
            const tool = $select.val();
            const $container = $select.closest('.kirin-widget').find('.kirin-vulnerabilities');
            $container.data('tool', tool);
            this.loadVulnerabilities($container);
        }

        startAutoRefresh() {
            // Auto-refresh every 5 minutes
            setInterval(() => {
                $('.kirin-vulnerabilities[data-auto-refresh="true"]').each((index, element) => {
                    this.loadVulnerabilities($(element));
                });

                $('.kirin-stats[data-auto-refresh="true"]').each((index, element) => {
                    this.loadStats($(element));
                });

                $('.kirin-alerts[data-auto-refresh="true"]').each((index, element) => {
                    this.loadAlerts($(element));
                });
            }, 5 * 60 * 1000);
        }

        escapeHtml(text) {
            if (typeof text !== 'string') {
                return text;
            }
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
    }

    // Initialize when document is ready
    $(document).ready(function() {
        new KirinVulnDB();
    });

    // Expose for global access
    window.KirinVulnDB = KirinVulnDB;

})(jQuery);
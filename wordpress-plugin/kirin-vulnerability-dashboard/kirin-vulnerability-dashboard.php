<?php
/**
 * Plugin Name: Kirin Vulnerability Dashboard
 * Plugin URI: https://knostic.ai
 * Description: Display AI coding tool vulnerabilities from Kirin Vulnerability Database directly on your WordPress site. Features real-time vulnerability feeds, statistics widgets, and security alerts.
 * Version: 1.0.0
 * Author: Rick Deacon, Knostic AI
 * Author URI: https://knostic.ai
 * License: GPL v2 or later
 * License URI: https://www.gnu.org/licenses/gpl-2.0.html
 * Text Domain: kirin-vuln-dashboard
 * Domain Path: /languages
 * Requires at least: 5.0
 * Tested up to: 6.4
 * Requires PHP: 7.4
 * Network: false
 */

// Prevent direct access
if (!defined('ABSPATH')) {
    exit;
}

// Define plugin constants
define('KIRIN_VULN_VERSION', '1.0.0');
define('KIRIN_VULN_PLUGIN_URL', plugin_dir_url(__FILE__));
define('KIRIN_VULN_PLUGIN_PATH', plugin_dir_path(__FILE__));

/**
 * Main Kirin Vulnerability Dashboard Class
 */
class KirinVulnDashboard {
    
    /**
     * Plugin instance
     */
    private static $instance = null;
    
    /**
     * API settings
     */
    private $api_endpoint = 'http://localhost:8080/api';
    private $api_key = '';
    
    /**
     * Get plugin instance
     */
    public static function getInstance() {
        if (null === self::$instance) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    
    /**
     * Constructor
     */
    private function __construct() {
        add_action('init', array($this, 'init'));
        add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));
        add_action('admin_enqueue_scripts', array($this, 'admin_enqueue_scripts'));
        
        // Shortcodes
        add_shortcode('kirin-vulnerabilities', array($this, 'vulnerabilities_shortcode'));
        add_shortcode('kirin-stats', array($this, 'stats_shortcode'));
        add_shortcode('kirin-alerts', array($this, 'alerts_shortcode'));
        add_shortcode('kirin-embed', array($this, 'embed_shortcode'));
        
        // Widgets
        add_action('widgets_init', array($this, 'register_widgets'));
        
        // Admin menu
        add_action('admin_menu', array($this, 'add_admin_menu'));
        
        // AJAX handlers
        add_action('wp_ajax_kirin_get_vulnerabilities', array($this, 'ajax_get_vulnerabilities'));
        add_action('wp_ajax_nopriv_kirin_get_vulnerabilities', array($this, 'ajax_get_vulnerabilities'));
        
        // Gutenberg blocks
        add_action('init', array($this, 'register_blocks'));
        
        // Plugin activation/deactivation
        register_activation_hook(__FILE__, array($this, 'activate'));
        register_deactivation_hook(__FILE__, array($this, 'deactivate'));
    }
    
    /**
     * Initialize plugin
     */
    public function init() {
        $this->load_options();
        $this->load_textdomain();
    }
    
    /**
     * Load plugin options
     */
    private function load_options() {
        $options = get_option('kirin_vuln_options', array());
        $this->api_endpoint = $options['api_endpoint'] ?? 'http://localhost:8080/api';
        $this->api_key = $options['api_key'] ?? 'wp-demo-key';
    }
    
    /**
     * Load text domain for translations
     */
    public function load_textdomain() {
        load_plugin_textdomain('kirin-vuln-dashboard', false, dirname(plugin_basename(__FILE__)) . '/languages');
    }
    
    /**
     * Enqueue frontend scripts and styles
     */
    public function enqueue_scripts() {
        wp_enqueue_style('kirin-vuln-dashboard', KIRIN_VULN_PLUGIN_URL . 'assets/css/frontend.css', array(), KIRIN_VULN_VERSION);
        wp_enqueue_script('kirin-vuln-dashboard', KIRIN_VULN_PLUGIN_URL . 'assets/js/frontend.js', array('jquery'), KIRIN_VULN_VERSION, true);
        
        // Localize script for AJAX
        wp_localize_script('kirin-vuln-dashboard', 'kirinVuln', array(
            'ajaxUrl' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('kirin_vuln_nonce'),
            'apiEndpoint' => $this->api_endpoint,
            'apiKey' => $this->api_key
        ));
    }
    
    /**
     * Enqueue admin scripts and styles
     */
    public function admin_enqueue_scripts($hook) {
        if (strpos($hook, 'kirin-vuln') !== false) {
            wp_enqueue_style('kirin-vuln-admin', KIRIN_VULN_PLUGIN_URL . 'assets/css/admin.css', array(), KIRIN_VULN_VERSION);
            wp_enqueue_script('kirin-vuln-admin', KIRIN_VULN_PLUGIN_URL . 'assets/js/admin.js', array('jquery'), KIRIN_VULN_VERSION, true);
        }
    }
    
    /**
     * Vulnerabilities shortcode
     * Usage: [kirin-vulnerabilities limit="5" severity="critical" theme="light"]
     */
    public function vulnerabilities_shortcode($atts) {
        $atts = shortcode_atts(array(
            'limit' => '5',
            'severity' => '',
            'tool' => '',
            'theme' => 'light',
            'format' => 'list'
        ), $atts, 'kirin-vulnerabilities');
        
        $vulnerabilities = $this->fetch_vulnerabilities($atts);
        
        if (is_wp_error($vulnerabilities)) {
            return '<div class="kirin-error">Failed to load vulnerabilities: ' . $vulnerabilities->get_error_message() . '</div>';
        }
        
        return $this->render_vulnerabilities($vulnerabilities, $atts);
    }
    
    /**
     * Statistics shortcode
     * Usage: [kirin-stats theme="dark"]
     */
    public function stats_shortcode($atts) {
        $atts = shortcode_atts(array(
            'theme' => 'light',
            'layout' => 'grid'
        ), $atts, 'kirin-stats');
        
        $stats = $this->fetch_stats();
        
        if (is_wp_error($stats)) {
            return '<div class="kirin-error">Failed to load statistics: ' . $stats->get_error_message() . '</div>';
        }
        
        return $this->render_stats($stats, $atts);
    }
    
    /**
     * Alerts shortcode
     * Usage: [kirin-alerts limit="3" theme="light"]
     */
    public function alerts_shortcode($atts) {
        $atts = shortcode_atts(array(
            'limit' => '3',
            'theme' => 'light'
        ), $atts, 'kirin-alerts');
        
        $alerts = $this->fetch_alerts($atts);
        
        if (is_wp_error($alerts)) {
            return '<div class="kirin-error">Failed to load alerts: ' . $alerts->get_error_message() . '</div>';
        }
        
        return $this->render_alerts($alerts, $atts);
    }
    
    /**
     * Embed dashboard shortcode
     * Usage: [kirin-embed height="600" theme="light"]
     */
    public function embed_shortcode($atts) {
        $atts = shortcode_atts(array(
            'height' => '600',
            'width' => '100%',
            'theme' => 'light',
            'limit' => '10'
        ), $atts, 'kirin-embed');
        
        $embed_url = str_replace('/api', '', $this->api_endpoint) . "/embed.html";
        $embed_url = add_query_arg(array(
            'theme' => $atts['theme'],
            'limit' => $atts['limit'],
            'api_key' => $this->api_key
        ), $embed_url);
        
        return sprintf(
            '<iframe src="%s" width="%s" height="%s" frameborder="0" style="border: 1px solid #ddd; border-radius: 8px;"></iframe>',
            esc_url($embed_url),
            esc_attr($atts['width']),
            esc_attr($atts['height'])
        );
    }
    
    /**
     * Fetch vulnerabilities from API
     */
    private function fetch_vulnerabilities($params = array()) {
        $url = $this->api_endpoint . '/wordpress/embed/vulnerabilities';
        $args = array(
            'headers' => array(
                'X-API-Key' => $this->api_key
            ),
            'body' => array_filter(array(
                'limit' => $params['limit'] ?? '5',
                'severity' => $params['severity'] ?? '',
                'tool' => $params['tool'] ?? '',
                'format' => 'json'
            ))
        );
        
        $response = wp_remote_get(add_query_arg($args['body'], $url), $args);
        
        if (is_wp_error($response)) {
            return $response;
        }
        
        $body = wp_remote_retrieve_body($response);
        $data = json_decode($body, true);
        
        if (json_last_error() !== JSON_ERROR_NONE) {
            return new WP_Error('json_error', 'Invalid JSON response');
        }
        
        return $data;
    }
    
    /**
     * Fetch statistics from API
     */
    private function fetch_stats() {
        $url = $this->api_endpoint . '/wordpress/embed/stats';
        $args = array(
            'headers' => array(
                'X-API-Key' => $this->api_key
            )
        );
        
        $response = wp_remote_get($url, $args);
        
        if (is_wp_error($response)) {
            return $response;
        }
        
        $body = wp_remote_retrieve_body($response);
        $data = json_decode($body, true);
        
        return $data['stats'] ?? array();
    }
    
    /**
     * Fetch alerts from API
     */
    private function fetch_alerts($params = array()) {
        $url = $this->api_endpoint . '/wordpress/embed/alerts';
        $args = array(
            'headers' => array(
                'X-API-Key' => $this->api_key
            ),
            'body' => array_filter(array(
                'limit' => $params['limit'] ?? '3'
            ))
        );
        
        $response = wp_remote_get(add_query_arg($args['body'], $url), $args);
        
        if (is_wp_error($response)) {
            return $response;
        }
        
        $body = wp_remote_retrieve_body($response);
        $data = json_decode($body, true);
        
        return $data['alerts'] ?? array();
    }
    
    /**
     * Render vulnerabilities HTML
     */
    private function render_vulnerabilities($data, $atts) {
        $vulnerabilities = $data['vulnerabilities'] ?? array();
        $theme_class = 'kirin-theme-' . $atts['theme'];
        
        if (empty($vulnerabilities)) {
            return '<div class="kirin-no-data">No vulnerabilities found</div>';
        }
        
        ob_start();
        ?>
        <div class="kirin-vulnerabilities <?php echo esc_attr($theme_class); ?>">
            <?php foreach ($vulnerabilities as $vuln): ?>
                <div class="kirin-vuln-item severity-<?php echo esc_attr(strtolower($vuln['severity'])); ?>">
                    <div class="kirin-vuln-header">
                        <span class="kirin-vuln-id"><?php echo esc_html($vuln['cve_id'] ?? $vuln['vulnerability_id'] ?? 'N/A'); ?></span>
                        <span class="kirin-vuln-severity"><?php echo esc_html($vuln['severity']); ?></span>
                    </div>
                    <div class="kirin-vuln-title"><?php echo esc_html($vuln['title']); ?></div>
                    <div class="kirin-vuln-meta">
                        <span>CVSS: <?php echo esc_html($vuln['cvss_score'] ?? 'N/A'); ?></span>
                        <span>Status: <?php echo esc_html(str_replace('_', ' ', $vuln['patch_status'])); ?></span>
                        <span><?php echo esc_html(date('M j, Y', strtotime($vuln['created_at']))); ?></span>
                    </div>
                </div>
            <?php endforeach; ?>
        </div>
        <?php
        return ob_get_clean();
    }
    
    /**
     * Render statistics HTML
     */
    private function render_stats($stats, $atts) {
        $theme_class = 'kirin-theme-' . $atts['theme'];
        
        ob_start();
        ?>
        <div class="kirin-stats <?php echo esc_attr($theme_class); ?>">
            <div class="kirin-stat-item stat-critical">
                <div class="kirin-stat-value"><?php echo esc_html($stats['critical_vulnerabilities'] ?? '0'); ?></div>
                <div class="kirin-stat-label">Critical</div>
            </div>
            <div class="kirin-stat-item stat-high">
                <div class="kirin-stat-value"><?php echo esc_html($stats['high_vulnerabilities'] ?? '0'); ?></div>
                <div class="kirin-stat-label">High</div>
            </div>
            <div class="kirin-stat-item stat-total">
                <div class="kirin-stat-value"><?php echo esc_html($stats['total_vulnerabilities'] ?? '0'); ?></div>
                <div class="kirin-stat-label">Total</div>
            </div>
            <div class="kirin-stat-item stat-recent">
                <div class="kirin-stat-value"><?php echo esc_html($stats['recent_vulnerabilities'] ?? '0'); ?></div>
                <div class="kirin-stat-label">Recent</div>
            </div>
        </div>
        <?php
        return ob_get_clean();
    }
    
    /**
     * Render alerts HTML
     */
    private function render_alerts($alerts, $atts) {
        $theme_class = 'kirin-theme-' . $atts['theme'];
        
        if (empty($alerts)) {
            return '<div class="kirin-no-alerts">No critical alerts</div>';
        }
        
        ob_start();
        ?>
        <div class="kirin-alerts <?php echo esc_attr($theme_class); ?>">
            <?php foreach ($alerts as $alert): ?>
                <div class="kirin-alert-item">
                    <div class="kirin-alert-header">
                        <span class="kirin-alert-severity"><?php echo esc_html($alert['severity']); ?></span>
                        <span class="kirin-alert-date"><?php echo esc_html(date('M j', strtotime($alert['discovery_date']))); ?></span>
                    </div>
                    <div class="kirin-alert-title"><?php echo esc_html($alert['title']); ?></div>
                    <div class="kirin-alert-id"><?php echo esc_html($alert['id']); ?></div>
                </div>
            <?php endforeach; ?>
        </div>
        <?php
        return ob_get_clean();
    }
    
    /**
     * Register widgets
     */
    public function register_widgets() {
        require_once KIRIN_VULN_PLUGIN_PATH . 'includes/class-kirin-vuln-widget.php';
        register_widget('KirinVulnWidget');
    }
    
    /**
     * Add admin menu
     */
    public function add_admin_menu() {
        add_options_page(
            __('Kirin Vulnerability Dashboard', 'kirin-vuln-dashboard'),
            __('Kirin VulnDB', 'kirin-vuln-dashboard'),
            'manage_options',
            'kirin-vuln-dashboard',
            array($this, 'admin_page')
        );
    }
    
    /**
     * Admin page
     */
    public function admin_page() {
        if (isset($_POST['submit'])) {
            $options = array(
                'api_endpoint' => sanitize_url($_POST['api_endpoint']),
                'api_key' => sanitize_text_field($_POST['api_key'])
            );
            update_option('kirin_vuln_options', $options);
            echo '<div class="notice notice-success"><p>Settings saved!</p></div>';
        }
        
        $options = get_option('kirin_vuln_options', array());
        ?>
        <div class="wrap">
            <h1><?php _e('Kirin Vulnerability Dashboard Settings', 'kirin-vuln-dashboard'); ?></h1>
            
            <form method="post" action="">
                <table class="form-table">
                    <tr>
                        <th scope="row"><?php _e('API Endpoint', 'kirin-vuln-dashboard'); ?></th>
                        <td>
                            <input type="url" name="api_endpoint" value="<?php echo esc_attr($options['api_endpoint'] ?? 'http://localhost:8080/api'); ?>" class="regular-text" />
                            <p class="description"><?php _e('URL to your Kirin Vulnerability Database API', 'kirin-vuln-dashboard'); ?></p>
                        </td>
                    </tr>
                    <tr>
                        <th scope="row"><?php _e('API Key', 'kirin-vuln-dashboard'); ?></th>
                        <td>
                            <input type="text" name="api_key" value="<?php echo esc_attr($options['api_key'] ?? 'wp-demo-key'); ?>" class="regular-text" />
                            <p class="description"><?php _e('Your API key for accessing the vulnerability database', 'kirin-vuln-dashboard'); ?></p>
                        </td>
                    </tr>
                </table>
                <?php submit_button(); ?>
            </form>
            
            <h2><?php _e('Usage Examples', 'kirin-vuln-dashboard'); ?></h2>
            <h3><?php _e('Shortcodes', 'kirin-vuln-dashboard'); ?></h3>
            <ul>
                <li><code>[kirin-vulnerabilities limit="5" severity="critical"]</code> - Display 5 critical vulnerabilities</li>
                <li><code>[kirin-stats theme="dark"]</code> - Display statistics with dark theme</li>
                <li><code>[kirin-alerts limit="3"]</code> - Display 3 latest alerts</li>
                <li><code>[kirin-embed height="600" theme="light"]</code> - Embed full dashboard</li>
            </ul>
        </div>
        <?php
    }
    
    /**
     * AJAX handler for vulnerabilities
     */
    public function ajax_get_vulnerabilities() {
        check_ajax_referer('kirin_vuln_nonce', 'nonce');
        
        $limit = sanitize_text_field($_POST['limit'] ?? '5');
        $severity = sanitize_text_field($_POST['severity'] ?? '');
        
        $vulnerabilities = $this->fetch_vulnerabilities(array(
            'limit' => $limit,
            'severity' => $severity
        ));
        
        wp_send_json($vulnerabilities);
    }
    
    /**
     * Register Gutenberg blocks
     */
    public function register_blocks() {
        if (function_exists('register_block_type')) {
            wp_register_script(
                'kirin-vuln-blocks',
                KIRIN_VULN_PLUGIN_URL . 'assets/js/blocks.js',
                array('wp-blocks', 'wp-element', 'wp-editor'),
                KIRIN_VULN_VERSION,
                true
            );
            
            register_block_type('kirin-vuln/vulnerabilities', array(
                'editor_script' => 'kirin-vuln-blocks',
                'render_callback' => array($this, 'vulnerabilities_shortcode')
            ));
        }
    }
    
    /**
     * Plugin activation
     */
    public function activate() {
        // Set default options
        add_option('kirin_vuln_options', array(
            'api_endpoint' => 'http://localhost:8080/api',
            'api_key' => 'wp-demo-key'
        ));
    }
    
    /**
     * Plugin deactivation
     */
    public function deactivate() {
        // Clean up if needed
    }
}

// Initialize plugin
KirinVulnDashboard::getInstance();
?>
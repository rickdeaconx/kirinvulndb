PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE vulnerability (
	vulnerability_id VARCHAR(255) NOT NULL, 
	cve_id VARCHAR(50), 
	title VARCHAR(500) NOT NULL, 
	description TEXT NOT NULL, 
	severity VARCHAR(8) NOT NULL, 
	cvss_score FLOAT, 
	cvss_vector VARCHAR(200), 
	discovery_date DATETIME NOT NULL, 
	public_disclosure DATETIME, 
	first_seen_timestamp DATETIME NOT NULL, 
	last_updated_timestamp DATETIME NOT NULL, 
	attack_vectors JSON NOT NULL, 
	technical_details TEXT, 
	impact_assessment TEXT, 
	patch_status VARCHAR(15) NOT NULL, 
	remediation_steps TEXT, 
	affected_versions JSON, 
	fixed_versions JSON, 
	poc_available BOOLEAN, 
	exploit_in_wild BOOLEAN, 
	exploit_maturity VARCHAR(50), 
	tags JSON, 
	"references" JSON, 
	source VARCHAR(100) NOT NULL, 
	confidence_score FLOAT, 
	kirin_remediation_available BOOLEAN, 
	kirin_policy_mappings JSON, 
	auto_remediation_possible BOOLEAN, 
	cwe_ids JSON, 
	owasp_category VARCHAR(100), 
	mitre_techniques JSON, 
	id UUID NOT NULL, 
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
);
INSERT INTO "vulnerability" VALUES('CVE-2023-40049','CVE-2023-40049','Code Injection in AI Assistant Extensions','Multiple AI-powered code completion tools are vulnerable to code injection attacks through malicious repository data, allowing attackers to inject arbitrary code suggestions.','HIGH',7.8,NULL,'2023-08-15 00:00:00.000000',NULL,'2025-09-09 16:49:13.240107','2025-09-09 16:49:13.240110','["injection", "rce"]',NULL,NULL,'PATCH_AVAILABLE',NULL,NULL,NULL,0,0,NULL,'["code-injection", "ai-assistant", "supply-chain"]','["https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-40049", "https://github.com/advisories/GHSA-example"]','cve',0.95,0,NULL,0,'[]',NULL,'[]','cdda6b1ce35544ce892d0517cb8c5a9e','2025-09-09 16:49:13','2025-09-09 16:49:13');
INSERT INTO "vulnerability" VALUES('GHSA-2023-AI-001',NULL,'Prompt Injection Leading to Sensitive Data Exposure','AI coding assistants can be manipulated through carefully crafted prompts in code comments to leak sensitive information from training data or internal systems.','HIGH',7.5,NULL,'2023-09-22 00:00:00.000000',NULL,'2025-09-09 16:49:13.240135','2025-09-09 16:49:13.240136','["prompt_injection", "data_exfiltration"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["prompt-injection", "data-exposure", "privacy"]','["https://github.com/advisories/GHSA-2023-AI-001", "https://arxiv.org/abs/2310.12345"]','github',0.95,0,NULL,0,'[]',NULL,'[]','367e7754661047139e82d4289979b607','2025-09-09 16:49:13','2025-09-09 16:49:13');
INSERT INTO "vulnerability" VALUES('CVE-2023-45678','CVE-2023-45678','Authentication Bypass in AI Plugin Architecture','Insufficient authentication checks in AI coding assistant plugin systems allow unauthorized code execution and system access.','CRITICAL',9.1,NULL,'2023-10-08 00:00:00.000000',NULL,'2025-09-09 16:49:13.240143','2025-09-09 16:49:13.240143','["privilege_escalation", "rce"]',NULL,NULL,'PATCHED',NULL,NULL,NULL,0,0,NULL,'["authentication", "bypass", "plugin", "rce"]','["https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-45678", "https://security.cursor.ai/advisory-001"]','cve',0.95,0,NULL,0,'[]',NULL,'[]','92f8b1c04c4a4ec9b8d18059ebb79320','2025-09-09 16:49:13','2025-09-09 16:49:13');
INSERT INTO "vulnerability" VALUES('CVE-2024-12345','CVE-2024-12345','Remote Code Execution via Malicious Code Completions','AI assistants can be tricked into suggesting code that executes immediately upon completion, leading to arbitrary code execution on developer machines.','CRITICAL',9.8,NULL,'2024-01-15 00:00:00.000000',NULL,'2025-09-09 16:49:13.240155','2025-09-09 16:49:13.240155','["rce", "injection"]',NULL,NULL,'PATCH_AVAILABLE',NULL,NULL,NULL,0,0,NULL,'["rce", "code-completion", "zero-day"]','["https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-12345", "https://github.com/security-research/ai-rce-poc"]','cve',0.95,0,NULL,0,'[]',NULL,'[]','7cfdb830692e455fa79092d347e3f8eb','2025-09-09 16:49:13','2025-09-09 16:49:13');
INSERT INTO "vulnerability" VALUES('CVE-2024-SUPPLY-001','CVE-2024-SUPPLY-001','Supply Chain Attack via AI Training Data Manipulation','Attackers can manipulate publicly available code repositories to influence AI model training, leading to systematic injection of vulnerable code patterns.','HIGH',7.9,NULL,'2024-04-05 00:00:00.000000',NULL,'2025-09-09 16:49:13.240171','2025-09-09 16:49:13.240171','["backdoor", "model_poisoning"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["supply-chain", "training-data", "backdoor"]','["https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-SUPPLY-001", "https://security.microsoft.com/advisory/supply-chain-ai"]','cve',0.95,0,NULL,0,'[]',NULL,'[]','02a1984f8f524b8bade2751fb6c00b30','2025-09-09 16:49:13','2025-09-09 16:49:13');
INSERT INTO "vulnerability" VALUES('CVE-2021-44228','CVE-2021-44228','Log4j Remote Code Execution (Log4Shell) - Affects AI Development Tools','Apache Log4j2 <=2.14.1 JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. This affects many AI development tools and IDEs that use Java components.','CRITICAL',10.0,'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H','2021-12-09 00:00:00.000000','2021-12-10 00:00:00.000000','2025-09-09 17:00:05.447007','2025-09-09 17:00:05.447012','["rce", "injection"]',NULL,NULL,'PATCHED',NULL,NULL,NULL,1,1,NULL,'["log4j", "rce", "java", "supply-chain"]','["https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228", "https://nvd.nist.gov/vuln/detail/CVE-2021-44228", "https://www.jetbrains.com/security/advisory/", "https://logging.apache.org/log4j/2.x/security.html"]','nvd',1.0,0,NULL,0,'[]',NULL,'[]','695f65d541344bb29b2becbfa53657e5','2025-09-09 17:00:05','2025-09-09 17:00:05');
INSERT INTO "vulnerability" VALUES('CVE-2022-0778','CVE-2022-0778','OpenSSL Infinite Loop DoS - Affects AI Tool Certificate Validation','The BN_mod_sqrt() function, which computes a modular square root, contains a bug that can cause it to loop forever for non-prime moduli. This affects AI coding tools that use OpenSSL for secure connections.','HIGH',7.5,'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H','2022-03-15 00:00:00.000000','2022-03-15 00:00:00.000000','2025-09-09 17:00:05.447033','2025-09-09 17:00:05.447034','["injection"]',NULL,NULL,'PATCHED',NULL,NULL,NULL,1,0,NULL,'["openssl", "dos", "certificate", "infinite-loop"]','["https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-0778", "https://nvd.nist.gov/vuln/detail/CVE-2022-0778", "https://www.openssl.org/news/secadv/20220315.txt", "https://github.com/openssl/openssl/commit/380085481c64de749a6dd25cdf0bcf4360c3f7a"]','nvd',1.0,0,NULL,0,'[]',NULL,'[]','c7d9526a8cbe4c42bdf119b1eac84369','2025-09-09 17:00:05','2025-09-09 17:00:05');
INSERT INTO "vulnerability" VALUES('GHSA-8fr2-4q3v-r5xw',NULL,'VS Code Extension Host Remote Code Execution','Visual Studio Code extension host allows remote code execution through malicious extensions. This affects AI-powered extensions like GitHub Copilot.','HIGH',8.8,NULL,'2023-04-12 00:00:00.000000','2023-04-15 00:00:00.000000','2025-09-09 17:00:05.447040','2025-09-09 17:00:05.447040','["rce"]',NULL,NULL,'PATCHED',NULL,NULL,NULL,0,0,NULL,'["vscode", "extension", "rce", "github-advisory"]','["https://github.com/advisories/GHSA-8fr2-4q3v-r5xw", "https://code.visualstudio.com/updates/v1_77#_security-fixes", "https://github.com/microsoft/vscode/security/advisories"]','github',1.0,0,NULL,0,'[]',NULL,'[]','cc1c92c9a30e41728354086f4db1c048','2025-09-09 17:00:05','2025-09-09 17:00:05');
INSERT INTO "vulnerability" VALUES('CVE-2023-29007','CVE-2023-29007','Git for Windows Uncontrolled Search Path Element','Git for Windows is vulnerable to uncontrolled search path element allowing attackers to plant malicious files. This affects AI development workflows that use Git integration.','HIGH',7.8,'CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H','2023-04-25 00:00:00.000000','2023-04-25 00:00:00.000000','2025-09-09 17:00:05.447045','2025-09-09 17:00:05.447046','["privilege_escalation"]',NULL,NULL,'PATCHED',NULL,NULL,NULL,1,0,NULL,'["git", "windows", "search-path", "privilege-escalation"]','["https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-29007", "https://nvd.nist.gov/vuln/detail/CVE-2023-29007", "https://github.com/git-for-windows/git/security/advisories/GHSA-gf48-x3vr-j3c3"]','nvd',1.0,0,NULL,0,'[]',NULL,'[]','e05f51493cec4ca3b68d413a45ba92cf','2025-09-09 17:00:05','2025-09-09 17:00:05');
INSERT INTO "vulnerability" VALUES('GHSA-259w-8hf6-59c2',NULL,'Electron Context Isolation Bypass','Electron applications with context isolation enabled are vulnerable to context isolation bypasses. This affects desktop AI coding tools built with Electron.','HIGH',8.2,NULL,'2023-09-28 00:00:00.000000','2023-09-28 00:00:00.000000','2025-09-09 17:00:05.447050','2025-09-09 17:00:05.447051','["rce", "privilege_escalation"]',NULL,NULL,'PATCHED',NULL,NULL,NULL,1,0,NULL,'["electron", "context-isolation", "bypass", "desktop-app"]','["https://github.com/advisories/GHSA-259w-8hf6-59c2", "https://github.com/electron/electron/security/advisories/GHSA-259w-8hf6-59c2", "https://www.electronjs.org/blog/statement-run-as-node-cves"]','github',1.0,0,NULL,0,'[]',NULL,'[]','5a7aa625adf241a68129454bfa8b8a76','2025-09-09 17:00:05','2025-09-09 17:00:05');
INSERT INTO "vulnerability" VALUES('CVE-2024-21626','CVE-2024-21626','runc Process.cwd and Process.env Handling Issue','runc process.cwd and process.env seccomp bypasses allow container escape. This affects containerized AI development environments.','HIGH',8.6,'CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H','2024-01-31 00:00:00.000000','2024-01-31 00:00:00.000000','2025-09-09 17:00:05.447055','2025-09-09 17:00:05.447056','["privilege_escalation"]',NULL,NULL,'PATCHED',NULL,NULL,NULL,1,0,NULL,'["runc", "container-escape", "seccomp", "docker"]','["https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-21626", "https://nvd.nist.gov/vuln/detail/CVE-2024-21626", "https://github.com/opencontainers/runc/security/advisories/GHSA-xr7r-f8xq-vfvv"]','nvd',1.0,0,NULL,0,'[]',NULL,'[]','0cdbc1188e6c44d1ac3eeb689ce7d63a','2025-09-09 17:00:05','2025-09-09 17:00:05');
INSERT INTO "vulnerability" VALUES('GHSA-wjxw-gh3m-7pm5',NULL,'Node.js Permission Model Bypass via fs.statfs','The Node.js Permission Model does not clarify in the documentation that fs.statfs is an accessible api through the permission model. This affects Node.js-based AI development tools.','MEDIUM',5.3,NULL,'2024-01-20 00:00:00.000000','2024-01-20 00:00:00.000000','2025-09-09 17:00:05.447060','2025-09-09 17:00:05.447061','["privilege_escalation"]',NULL,NULL,'PATCHED',NULL,NULL,NULL,0,0,NULL,'["nodejs", "permission-model", "fs-statfs", "bypass"]','["https://github.com/advisories/GHSA-wjxw-gh3m-7pm5", "https://github.com/nodejs/node/security/advisories/GHSA-wjxw-gh3m-7pm5", "https://nodejs.org/en/security/"]','github',1.0,0,NULL,0,'[]',NULL,'[]','221d89a25b6e46a58f5efcbaafe33f6e','2025-09-09 17:00:05','2025-09-09 17:00:05');
INSERT INTO "vulnerability" VALUES('CVE-2023-45853','CVE-2023-45853','MiniZip Buffer Overflow','Buffer Overflow vulnerability in MiniZip allows attackers to cause a denial of service via crafted zip files. This affects AI tools that process zip archives.','MEDIUM',6.5,'CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H','2023-10-19 00:00:00.000000','2023-10-19 00:00:00.000000','2025-09-09 17:00:05.447065','2025-09-09 17:00:05.447066','["injection"]',NULL,NULL,'PATCH_AVAILABLE',NULL,NULL,NULL,1,0,NULL,'["minizip", "buffer-overflow", "zip", "dos"]','["https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-45853", "https://nvd.nist.gov/vuln/detail/CVE-2023-45853", "https://github.com/madler/zlib/issues/843"]','nvd',1.0,0,NULL,0,'[]',NULL,'[]','ae9371f7a6f04693978f6fd0976726f8','2025-09-09 17:00:05','2025-09-09 17:00:05');
INSERT INTO "vulnerability" VALUES('GHSA-c7hr-j4mj-j2w6',NULL,'Actions Runner Controller Privilege Escalation','Actions Runner Controller (ARC) can be configured in a way that allows privilege escalation. This affects GitHub Actions workflows used in AI development.','HIGH',8.8,NULL,'2023-12-14 00:00:00.000000','2023-12-14 00:00:00.000000','2025-09-09 17:00:05.447070','2025-09-09 17:00:05.447070','["privilege_escalation"]',NULL,NULL,'PATCHED',NULL,NULL,NULL,0,0,NULL,'["github-actions", "runner", "privilege-escalation", "kubernetes"]','["https://github.com/advisories/GHSA-c7hr-j4mj-j2w6", "https://github.com/actions/actions-runner-controller/security/advisories/GHSA-c7hr-j4mj-j2w6", "https://github.blog/security/"]','github',1.0,0,NULL,0,'[]',NULL,'[]','fe5107fb4949407da618b5494e7a40e1','2025-09-09 17:00:05','2025-09-09 17:00:05');
INSERT INTO "vulnerability" VALUES('CVE-2024-27298','CVE-2024-27298','Node.js HTTP Request Smuggling','Node.js HTTP/2 server is vulnerable to HTTP request smuggling when a raw HTTP/2 frame is sent. This affects AI tools with HTTP/2 endpoints.','MEDIUM',6.1,'CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N','2024-03-14 00:00:00.000000','2024-03-14 00:00:00.000000','2025-09-09 17:00:05.447075','2025-09-09 17:00:05.447075','["injection"]',NULL,NULL,'PATCHED',NULL,NULL,NULL,0,0,NULL,'["nodejs", "http2", "request-smuggling"]','["https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27298", "https://nvd.nist.gov/vuln/detail/CVE-2024-27298", "https://nodejs.org/en/blog/vulnerability/march-2024-security-releases/"]','nvd',1.0,0,NULL,0,'[]',NULL,'[]','ce67f70889d840f6809d1c9fecdc33c5','2025-09-09 17:00:05','2025-09-09 17:00:05');
INSERT INTO "vulnerability" VALUES('CVE-2025-54424','CVE-2025-54424','CVE CVE-2025-54424','1Panel is a web interface and MCP Server that manages websites, files, containers, databases, and LLMs on a Linux server. In versions 2.0.5 and below, the HTTPS protocol used for communication between the Core and Agent endpoints has incomplete certificate verification during certificate validation, leading to unauthorized interface access. Due to the presence of numerous command execution or high-privilege interfaces in 1Panel, this results in Remote Code Execution (RCE). This is fixed in version 2.0.6. The CVE has been translated from Simplified Chinese using GitHub Copilot.','HIGH',8.1,'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H','2025-09-09 14:43:03.366058',NULL,'2025-09-09 18:43:23.365991','2025-09-09 18:43:23.365997','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://github.com/1Panel-dev/1Panel/pull/9698/commits/4003284521f8d31ddaf7215d1c30ab8b4cdb0261", "https://github.com/1Panel-dev/1Panel/releases/tag/v2.0.6", "https://github.com/1Panel-dev/1Panel/security/advisories/GHSA-8j63-96wh-wh3j", "https://github.com/1Panel-dev/1Panel/security/advisories/GHSA-8j63-96wh-wh3j"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','71e1d84def4d41878f8969c9f153fcd8','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-53774','CVE-2025-53774','CVE CVE-2025-53774','Microsoft 365 Copilot BizChat Information Disclosure Vulnerability','MEDIUM',6.5,'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N','2025-09-09 14:43:03.366256',NULL,'2025-09-09 18:43:23.376840','2025-09-09 18:43:23.376844','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-53774"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','f78e8edabba349c89181cce486369268','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-53787','CVE-2025-53787','CVE CVE-2025-53787','Microsoft 365 Copilot BizChat Information Disclosure Vulnerability','HIGH',8.2,'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:N','2025-09-09 14:43:03.366799',NULL,'2025-09-09 18:43:23.380554','2025-09-09 18:43:23.380556','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-53787"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','4a00f2bcc6e74baf9844b64a7bffdffa','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-53773','CVE-2025-53773','CVE CVE-2025-53773','Improper neutralization of special elements used in a command (''command injection'') in GitHub Copilot and Visual Studio allows an unauthorized attacker to execute code locally.','HIGH',7.8,'CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H','2025-09-09 14:43:03.366871',NULL,'2025-09-09 18:43:23.382740','2025-09-09 18:43:23.382742','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-53773", "https://embracethered.com/blog/posts/2025/github-copilot-remote-code-execution-via-prompt-injection/", "https://news.ycombinator.com/item?id=44883108"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','c7b60169277641ef976394fba9f361d8','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-58401','CVE-2025-58401','CVE CVE-2025-58401','Obsidian GitHub Copilot Plugin versions prior to 1.1.7 store Github API token in cleartext form. As a result, an attacker may perform unauthorized operations on the linked Github account.','LOW',0.0,'','2025-09-09 14:43:03.366916',NULL,'2025-09-09 18:43:23.384946','2025-09-09 18:43:23.384947','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://github.com/Pierrad/obsidian-github-copilot/releases/tag/1.1.7", "https://jvn.jp/en/jp/JVN41633999/"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','0a5f61a02f6b4865b2150c921bf594fb','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2024-0409','CVE-2024-0409','CVE CVE-2024-0409','A flaw was found in the X.Org server. The cursor code in both Xephyr and Xwayland uses the wrong type of private at creation. It uses the cursor bits type with the cursor as private, and when initiating the cursor, that overwrites the XSELINUX context.','HIGH',7.8,'CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H','2025-09-09 14:43:04.569436',NULL,'2025-09-09 18:43:23.388286','2025-09-09 18:43:23.388288','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://access.redhat.com/errata/RHSA-2024:0320", "https://access.redhat.com/errata/RHSA-2024:2169", "https://access.redhat.com/errata/RHSA-2024:2170", "https://access.redhat.com/errata/RHSA-2024:2995", "https://access.redhat.com/errata/RHSA-2024:2996", "https://access.redhat.com/security/cve/CVE-2024-0409", "https://bugzilla.redhat.com/show_bug.cgi?id=2257690", "https://access.redhat.com/errata/RHSA-2024:0320", "https://access.redhat.com/errata/RHSA-2024:2169", "https://access.redhat.com/errata/RHSA-2024:2170", "https://access.redhat.com/errata/RHSA-2024:2995", "https://access.redhat.com/errata/RHSA-2024:2996", "https://access.redhat.com/security/cve/CVE-2024-0409", "https://bugzilla.redhat.com/show_bug.cgi?id=2257690", "https://lists.debian.org/debian-lts-announce/2024/01/msg00016.html", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/5J4H7CH565ALSZZYKOJFYDA5KFLG6NUK/", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/EJBMCWQ54R6ZL3MYU2D2JBW6JMZL7BQW/", "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IZ75X54CN4IFYMIV7OK3JVZ57FHQIGIC/", "https://security.gentoo.org/glsa/202401-30", "https://security.netapp.com/advisory/ntap-20240307-0006/"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','b86623e53390428c8fc120fa87be33e7','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2024-32477','CVE-2024-32477','CVE CVE-2024-32477','Deno is a JavaScript, TypeScript, and WebAssembly runtime with secure defaults. By using ANSI escape sequences and a race between `libc::tcflush(0, libc::TCIFLUSH)` and reading standard input, it''s possible to manipulate the permission prompt and force it to allow an unsafe action regardless of the user input. Some ANSI escape sequences act as a info request to the master terminal emulator and the terminal emulator sends back the reply in the PTY channel. standard streams also use this channel to send and get data. For example the `\033[6n` sequence requests the current cursor position. These sequences allow us to append data to the standard input of Deno. This vulnerability allows an attacker to bypass Deno permission policy.  This vulnerability is fixed in 1.42.2.
','HIGH',7.7,'CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N','2025-09-09 14:43:04.569753',NULL,'2025-09-09 18:43:23.390466','2025-09-09 18:43:23.390467','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://github.com/denoland/deno/security/advisories/GHSA-95cj-3hr2-7j5j", "https://github.com/denoland/deno/security/advisories/GHSA-95cj-3hr2-7j5j"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','5d2900964aa5414fa5144b73ca7cc46e','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-27423','CVE-2025-27423','CVE CVE-2025-27423','Vim is an open source, command line text editor. Vim is distributed with the tar.vim plugin, that allows easy editing and viewing of (compressed or uncompressed) tar files. Starting with 9.1.0858, the tar.vim plugin uses the ":read" ex command line to append below the cursor position, however the is not sanitized and is taken literally from the tar archive. This allows to execute shell commands via special crafted tar archives. Whether this really happens, depends on the shell being used (''shell'' option, which is set using $SHELL). The issue has been fixed as of Vim patch v9.1.1164','HIGH',7.1,'CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N','2025-09-09 14:43:04.569900',NULL,'2025-09-09 18:43:23.395765','2025-09-09 18:43:23.395772','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://github.com/vim/vim/commit/129a8446d23cd9cb4445fcfea259cba5e0487d29", "https://github.com/vim/vim/commit/334a13bff78aa0ad206bc436885f63e3a0bab399", "https://github.com/vim/vim/security/advisories/GHSA-wfmf-8626-q3r3", "https://security.netapp.com/advisory/ntap-20250502-0002/"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','4c9e186900a04869b1b08cdaeb42cce6','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-54131','CVE-2025-54131','CVE CVE-2025-54131','Cursor is a code editor built for programming with AI. In versions below 1.3, an attacker can bypass the allow list in auto-run mode with a backtick (`) or $(cmd). If a user has swapped Cursor from its default settings (requiring approval for every terminal call) to an allowlist, an attacker can execute arbitrary command execution outside of the allowlist without user approval. An attacker can trigger this vulnerability if chained with indirect prompt injection. This is fixed in version 1.3.','MEDIUM',6.4,'CVSS:3.1/AV:N/AC:H/PR:H/UI:R/S:U/C:H/I:H/A:H','2025-09-09 14:43:04.569972',NULL,'2025-09-09 18:43:23.401025','2025-09-09 18:43:23.401028','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://github.com/cursor/cursor/security/advisories/GHSA-534m-3w6r-8pqr"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','8373884e5bae49278bcf45dbf4cce7a7','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-54132','CVE-2025-54132','CVE CVE-2025-54132','Cursor is a code editor built for programming with AI. In versions below 1.3, Mermaid (which is used to render diagrams) allows embedding images which then get rendered by Cursor in the chat box. An attacker can use this to exfiltrate sensitive information to a third-party attacker controlled server through an image fetch after successfully performing a prompt injection. A malicious model (or hallucination/backdoor) might also trigger this exploit at will. This issue requires prompt injection from malicious data (web, image upload, source code) in order to exploit. In that case, it can send sensitive information to an attacker-controlled external server. This is fixed in version 1.3.','MEDIUM',4.4,'CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:U/C:H/I:N/A:N','2025-09-09 14:43:04.570020',NULL,'2025-09-09 18:43:23.407977','2025-09-09 18:43:23.407981','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://github.com/cursor/cursor/security/advisories/GHSA-43wj-mwcc-x93p"]','nvd',0.8,1,NULL,0,'[]',NULL,'[]','29cf6414bdfc4cbcbcfb819a3e07d072','2025-09-09 18:43:23','2025-09-10 15:31:43');
INSERT INTO "vulnerability" VALUES('CVE-2025-54133','CVE-2025-54133','CVE CVE-2025-54133','Cursor is a code editor built for programming with AI. In versions 1.17 through 1.2, there is a UI information disclosure vulnerability in Cursor''s MCP (Model Context Protocol) deeplink handler, allowing attackers to execute 2-click arbitrary system commands through social engineering attacks. When users click malicious `cursor://anysphere.cursor-deeplink/mcp/install` links, the installation dialog does not show the arguments being passed to the command being run. If a user clicks a malicious deeplink, then examines the installation dialog and clicks through, the full command including the arguments will be executed on the machine. This is fixed in version 1.3.','CRITICAL',9.6,'CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H','2025-09-09 14:43:04.570067',NULL,'2025-09-09 18:43:23.411522','2025-09-09 18:43:23.411525','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://github.com/cursor/cursor/security/advisories/GHSA-r22h-5wp2-2wfv"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','3e346575a60948218e94851cf4889953','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-54136','CVE-2025-54136','CVE CVE-2025-54136','Cursor is a code editor built for programming with AI. In versions 1.2.4 and below, attackers can achieve remote and persistent code execution by modifying an already trusted MCP configuration file inside a shared GitHub repository or editing the file locally on the target''s machine. Once a collaborator accepts a harmless MCP, the attacker can silently swap it for a malicious command (e.g., calc.exe) without triggering any warning or re-prompt. If an attacker has write permissions on a user''s active branches of a source repository that contains existing MCP servers the user has previously approved, or allows an attacker has arbitrary file-write locally, the attacker can achieve arbitrary code execution. This is fixed in version 1.3.','HIGH',7.2,'CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H','2025-09-09 14:43:04.570108',NULL,'2025-09-09 18:43:23.416487','2025-09-09 18:43:23.416490','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://github.com/cursor/cursor/security/advisories/GHSA-24mc-g4xr-4395"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','5e3eb01d22fa4739829434c48f2b09e0','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-54130','CVE-2025-54130','CVE CVE-2025-54130','Cursor is a code editor built for programming with AI. Cursor allows writing in-workspace files with no user approval in versions less than 1.3.9. If the file is a dotfile, editing it requires approval but creating a new one doesn''t. Hence, if sensitive editor files, such as the .vscode/settings.json file don''t already exist in the workspace, an attacker can chain a indirect prompt injection vulnerability to hijack the context to write to the settings file and trigger RCE on the victim without user approval. This is fixed in version 1.3.9.','HIGH',7.5,'CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:H','2025-09-09 14:43:04.570146',NULL,'2025-09-09 18:43:23.424634','2025-09-09 18:43:23.424638','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://github.com/cursor/cursor/security/advisories/GHSA-vqv7-vq92-x87f"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','40d6ba8b7e024ded9ac66dac13c2ebc3','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-54135','CVE-2025-54135','CVE CVE-2025-54135','Cursor is a code editor built for programming with AI. Cursor allows writing in-workspace files with no user approval in versions below 1.3.9, If the file is a dotfile, editing it requires approval but creating a new one doesn''t. Hence, if sensitive MCP files, such as the .cursor/mcp.json file don''t already exist in the workspace, an attacker can chain a indirect prompt injection vulnerability to hijack the context to write to the settings file and trigger RCE on the victim without user approval. This is fixed in version 1.3.9.','HIGH',8.5,'CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:H/A:H','2025-09-09 14:43:04.570185',NULL,'2025-09-09 18:43:23.431856','2025-09-09 18:43:23.431859','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://github.com/cursor/cursor/security/advisories/GHSA-4cxx-hrm3-49rm"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','b63aae43d0814051a4994cff2de719ee','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-9190','CVE-2025-9190','CVE CVE-2025-9190','The configuration of Cursor on macOS, specifically the "RunAsNode" fuse enabled, allows a local attacker with unprivileged access to execute arbitrary code that inherits Cursor TCC (Transparency, Consent, and Control) permissions. 
Acquired resource access is limited to previously granted permissions by the user. Accessing other resources beyond previously granted TCC permissions will prompt the user for approval in the name of Cursor, potentially disguising attacker''s malicious intent. 

This issue was detected in 15.4.1 version of Cursor. Project maintainers decided not to fix this issue, because a scenario including a local attacker falls outside their defined threat model.','LOW',0.0,'','2025-09-09 14:43:04.570224',NULL,'2025-09-09 18:43:23.434422','2025-09-09 18:43:23.434424','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://afine.com/threat-of-tcc-bypasses-on-macos/#cooking-cursor-app", "https://cert.pl/posts/2025/08/tcc-bypass/", "https://github.com/cursor/cursor", "https://github.com/cursor/cursor/security/advisories/GHSA-xp8w-f7f4-r544"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','e427b44def944742add8849d0737b3ea','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-26448','CVE-2025-26448','CVE CVE-2025-26448','In writeToParcel of CursorWindow.cpp, there is a possible out of bounds read due to uninitialized data. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.','MEDIUM',5.5,'CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N','2025-09-09 14:43:04.570263',NULL,'2025-09-09 18:43:23.438496','2025-09-09 18:43:23.438499','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://android.googlesource.com/platform/frameworks/base/+/3c1515f4d1942f2453554315a576ed874703f78b", "https://source.android.com/security/bulletin/2025-06-01"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','047cb8c68d6d4b10a927bf145662df04','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2024-26958','CVE-2024-26958','CVE CVE-2024-26958','In the Linux kernel, the following vulnerability has been resolved:

nfs: fix UAF in direct writes

In production we have been hitting the following warning consistently

------------[ cut here ]------------
refcount_t: underflow; use-after-free.
WARNING: CPU: 17 PID: 1800359 at lib/refcount.c:28 refcount_warn_saturate+0x9c/0xe0
Workqueue: nfsiod nfs_direct_write_schedule_work [nfs]
RIP: 0010:refcount_warn_saturate+0x9c/0xe0
PKRU: 55555554
Call Trace:
 <TASK>
 ? __warn+0x9f/0x130
 ? refcount_warn_saturate+0x9c/0xe0
 ? report_bug+0xcc/0x150
 ? handle_bug+0x3d/0x70
 ? exc_invalid_op+0x16/0x40
 ? asm_exc_invalid_op+0x16/0x20
 ? refcount_warn_saturate+0x9c/0xe0
 nfs_direct_write_schedule_work+0x237/0x250 [nfs]
 process_one_work+0x12f/0x4a0
 worker_thread+0x14e/0x3b0
 ? ZSTD_getCParams_internal+0x220/0x220
 kthread+0xdc/0x120
 ? __btf_name_valid+0xa0/0xa0
 ret_from_fork+0x1f/0x30

This is because we''re completing the nfs_direct_request twice in a row.

The source of this is when we have our commit requests to submit, we
process them and send them off, and then in the completion path for the
commit requests we have

if (nfs_commit_end(cinfo.mds))
	nfs_direct_write_complete(dreq);

However since we''re submitting asynchronous requests we sometimes have
one that completes before we submit the next one, so we end up calling
complete on the nfs_direct_request twice.

The only other place we use nfs_generic_commit_list() is in
__nfs_commit_inode, which wraps this call in a

nfs_commit_begin();
nfs_commit_end();

Which is a common pattern for this style of completion handling, one
that is also repeated in the direct code with get_dreq()/put_dreq()
calls around where we process events as well as in the completion paths.

Fix this by using the same pattern for the commit requests.

Before with my 200 node rocksdb stress running this warning would pop
every 10ish minutes.  With my patch the stress test has been running for
several hours without popping.','HIGH',7.8,'CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H','2025-09-09 14:43:08.370922',NULL,'2025-09-09 18:43:23.440930','2025-09-09 18:43:23.440932','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://git.kernel.org/stable/c/17f46b803d4f23c66cacce81db35fef3adb8f2af", "https://git.kernel.org/stable/c/1daf52b5ffb24870fbeda20b4967526d8f9e12ab", "https://git.kernel.org/stable/c/3abc2d160ed8213948b147295d77d44a22c88fa3", "https://git.kernel.org/stable/c/4595d90b5d2ea5fa4d318d13f59055aa4bf3e7f5", "https://git.kernel.org/stable/c/6cd3f13aaa62970b5169d990e936b2e96943bc6a", "https://git.kernel.org/stable/c/80d24b308b7ee7037fc90d8ac99f6f78df0a256f", "https://git.kernel.org/stable/c/cf54f66e1dd78990ec6b32177bca7e6ea2144a95", "https://git.kernel.org/stable/c/e25447c35f8745337ea8bc0c9697fcac14df8605", "https://git.kernel.org/stable/c/17f46b803d4f23c66cacce81db35fef3adb8f2af", "https://git.kernel.org/stable/c/1daf52b5ffb24870fbeda20b4967526d8f9e12ab", "https://git.kernel.org/stable/c/3abc2d160ed8213948b147295d77d44a22c88fa3", "https://git.kernel.org/stable/c/4595d90b5d2ea5fa4d318d13f59055aa4bf3e7f5", "https://git.kernel.org/stable/c/80d24b308b7ee7037fc90d8ac99f6f78df0a256f", "https://git.kernel.org/stable/c/cf54f66e1dd78990ec6b32177bca7e6ea2144a95", "https://git.kernel.org/stable/c/e25447c35f8745337ea8bc0c9697fcac14df8605", "https://lists.debian.org/debian-lts-announce/2024/06/msg00017.html"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','b8a6a8203e43415386c4e5b6ec0cbd69','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-23042','CVE-2025-23042','CVE CVE-2025-23042','Gradio is an open-source Python package that allows quick building of demos and web application for machine learning models, API, or any arbitrary Python function. Gradio''s Access Control List (ACL) for file paths can be bypassed by altering the letter case of a blocked file or directory path. This vulnerability arises due to the lack of case normalization in the file path validation logic. On case-insensitive file systems, such as those used by Windows and macOS, this flaw enables attackers to circumvent security restrictions and access sensitive files that should be protected. This issue can lead to unauthorized data access, exposing sensitive information and undermining the integrity of Gradio''s security model. Given Gradio''s popularity for building web applications, particularly in machine learning and AI, this vulnerability may pose a substantial threat if exploited in production environments. This issue has been addressed in release version 5.6.0. Users are advised to upgrade. There are no known workarounds for this vulnerability.','HIGH',7.5,'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N','2025-09-09 14:43:12.189283',NULL,'2025-09-09 18:43:23.442793','2025-09-09 18:43:23.442794','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://github.com/gradio-app/gradio/security/advisories/GHSA-j2jg-fq62-7c3h"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','bfb9df6ab9c44442bead9429b241a814','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-48889','CVE-2025-48889','CVE CVE-2025-48889','Gradio is an open-source Python package that allows quick building of demos and web application for machine learning models, API, or any arbitrary Python function. Prior to version 5.31.0, an arbitrary file copy vulnerability in Gradio''s flagging feature allows unauthenticated attackers to copy any readable file from the server''s filesystem. While attackers can''t read these copied files, they can cause DoS by copying large files (like /dev/urandom) to fill disk space. This issue has been patched in version 5.31.0.','MEDIUM',5.3,'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L','2025-09-09 14:43:12.189806',NULL,'2025-09-09 18:43:23.445238','2025-09-09 18:43:23.445239','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://github.com/gradio-app/gradio/security/advisories/GHSA-8jw3-6x8j-v96g", "https://github.com/gradio-app/gradio/security/advisories/GHSA-8jw3-6x8j-v96g"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','c7c0551eb876442f89dbc67fe02972db','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-47995','CVE-2025-47995','CVE CVE-2025-47995','Weak authentication in Azure Machine Learning allows an authorized attacker to elevate privileges over a network.','MEDIUM',6.5,'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N','2025-09-09 14:43:12.190044',NULL,'2025-09-09 18:43:23.447120','2025-09-09 18:43:23.447121','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-47995"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','d6a08b35684c402981affec485298659','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-49746','CVE-2025-49746','CVE CVE-2025-49746','Improper authorization in Azure Machine Learning allows an authorized attacker to elevate privileges over a network.','CRITICAL',9.9,'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H','2025-09-09 14:43:12.190201',NULL,'2025-09-09 18:43:23.448957','2025-09-09 18:43:23.448958','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-49746"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','3a989a4308fa4b0492210fa3b4dff601','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-49747','CVE-2025-49747','CVE CVE-2025-49747','Missing authorization in Azure Machine Learning allows an authorized attacker to elevate privileges over a network.','CRITICAL',9.9,'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H','2025-09-09 14:43:12.190345',NULL,'2025-09-09 18:43:23.450902','2025-09-09 18:43:23.450903','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://msrc.microsoft.com/update-guide/vulnerability/CVE-2025-49747"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','df2084bd904c41b3a548f7759f4866be','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-27496','CVE-2025-27496','CVE CVE-2025-27496','Snowflake, a platform for using artificial intelligence in the context of cloud computing, has a vulnerability in the Snowflake JDBC driver ("Driver") in versions 3.0.13 through 3.23.0 of the driver. When the logging level was set to DEBUG, the Driver would log locally the client-side encryption master key of the target stage during the execution of GET/PUT commands. This key by itself does not grant access to any sensitive data without additional access authorizations,  and is not logged server-side by Snowflake. Snowflake fixed the issue in version 3.23.1.','LOW',3.3,'CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N','2025-09-09 14:43:13.677828',NULL,'2025-09-09 18:43:23.454992','2025-09-09 18:43:23.454995','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://github.com/snowflakedb/snowflake-jdbc/commit/ef81582ce2f1dbc3c8794a696c94f4fe65fad507", "https://github.com/snowflakedb/snowflake-jdbc/security/advisories/GHSA-q298-375f-5q63"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','4c241c75f5394f8b9b4209799b0d96ea','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-31494','CVE-2025-31494','CVE CVE-2025-31494','AutoGPT is a platform that allows users to create, deploy, and manage continuous artificial intelligence agents that automate complex workflows. The AutoGPT Platform''s WebSocket API transmitted node execution updates to subscribers based on the graph_id+graph_version. Additionally, there was no check prohibiting users from subscribing with another user''s graph_id+graph_version. As a result, node execution updates from one user''s graph execution could be received by another user within the same instance. This vulnerability does not occur between different instances or between users and non-users of the platform. Single-user instances are not affected. In private instances with a user white-list, the impact is limited by the fact that all potential unintended recipients of these node execution updates must have been admitted by the administrator. This vulnerability is fixed in 0.6.1.','LOW',3.5,'CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N','2025-09-09 14:43:13.678379',NULL,'2025-09-09 18:43:23.459140','2025-09-09 18:43:23.459142','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://github.com/Significant-Gravitas/AutoGPT/pull/9660", "https://github.com/Significant-Gravitas/AutoGPT/releases/tag/autogpt-platform-beta-v0.6.1", "https://github.com/Significant-Gravitas/AutoGPT/security/advisories/GHSA-958f-37vw-jx8f"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','201389b858304fe4abcbf16a47afb61f','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-58357','CVE-2025-58357','CVE CVE-2025-58357','5ire is a cross-platform desktop artificial intelligence assistant and model context protocol client. Version 0.13.2 contains a vulnerability in the chat page''s script gadgets that enables content injection attacks through multiple vectors: malicious prompt injection pages, compromised MCP servers, and exploited tool integrations. This is fixed in version 0.14.0.','CRITICAL',9.6,'CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H','2025-09-09 14:43:13.678716',NULL,'2025-09-09 18:43:23.461756','2025-09-09 18:43:23.461757','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://github.com/nanbingxyz/5ire/releases/tag/v0.14.0", "https://github.com/nanbingxyz/5ire/security/advisories/GHSA-8527-3cch-95gf"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','0d49f0ba8542498fa86bfb3d0d3d5bfc','2025-09-09 18:43:23','2025-09-09 18:43:23');
INSERT INTO "vulnerability" VALUES('CVE-2025-32918','CVE-2025-32918','CVE CVE-2025-32918','Improper neutralization of Livestatus command delimiters in autocomplete endpoint within the RestAPI of Checkmk versions <2.4.0p6, <2.3.0p35, <2.2.0p44, and 2.1.0 (EOL) allows an authenticated user to inject arbitrary Livestatus commands.','HIGH',8.8,'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H','2025-09-09 14:44:00.971253',NULL,'2025-09-09 18:44:02.051242','2025-09-09 18:44:02.051255','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://checkmk.com/werk/17987"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','acb175202b74461dad7d5deb4df99456','2025-09-09 18:44:02','2025-09-09 18:44:02');
INSERT INTO "vulnerability" VALUES('CVE-2025-53857','CVE-2025-53857','CVE CVE-2025-53857','Mattermost Confluence Plugin version <1.5.0 fails to check the access of the user to the channel which allows attackers to get channel subscription details without proper access to the channel via API call to the GET autocomplete/GetChannelSubscriptions endpoint.','LOW',3.7,'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:N/A:N','2025-09-09 14:44:00.971434',NULL,'2025-09-09 18:44:02.058974','2025-09-09 18:44:02.058980','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://mattermost.com/security-updates"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','6c7f52695d7044bc90e343b8aefc52a8','2025-09-09 18:44:02','2025-09-09 18:44:02');
INSERT INTO "vulnerability" VALUES('CVE-2025-58768','CVE-2025-58768','CVE CVE-2025-58768','DeepChat is a smart assistant uses artificial intelligence. Prior to version 0.3.5, in the Mermaid chart rendering component, there is a risky operation of directly using `innerHTML` to set user content. Therefore, any malicious content rendered via Mermaid will directly trigger the exploit chain, leading to command execution. This vulnerability is primarily caused by a failure to fully address the existing XSS issue in the project, leading to another exploit chain. The exploit chain is consistent with the report GHSA-hqr4-4gfc-5p2j, executing arbitrary JavaScript code via XSS and arbitrary commands via exposed IPC. Version 0.3.5 contains an updated fix.','CRITICAL',9.6,'CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H','2025-09-10 06:33:05.151177',NULL,'2025-09-10 10:33:14.673377','2025-09-10 10:33:14.673380','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://github.com/ThinkInAIXYZ/deepchat/security/advisories/GHSA-f7q5-vc93-wp6j"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','838b30deef264f8ea5a8164082adcd8c','2025-09-10 10:33:14','2025-09-10 10:33:14');
INSERT INTO "vulnerability" VALUES('CVE-2024-48919','CVE-2024-48919','Cursor IDE Prompt Injection via Terminal Cmd-K','Critical vulnerability allowing malicious web-page influence in Cmd-K prompt, enabling injection of newline and control characters. This CVSS 9.2 vulnerability represents one of the most severe security issues discovered in Cursor IDE. The vulnerability exists in Cursor''s Cmd-K terminal functionality where malicious web pages can influence the prompt system.','CRITICAL',9.2,'CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H','2024-09-01 00:00:00.000000','2024-09-27 00:00:00.000000','2025-09-10 13:31:22.212744','2025-09-10 13:31:22.212747','["prompt injection", "command injection", "web-based attack"]',NULL,NULL,'PATCHED',NULL,'null','{"cursor": ["0.42+"]}',1,0,NULL,'["cursor", "prompt-injection", "terminal", "critical"]','["https://nvd.nist.gov/vuln/detail/CVE-2024-48919", "https://github.com/getcursor/cursor/security/advisories", "https://cursor.sh/security"]','verified_security_research',1.0,1,NULL,0,'[]',NULL,'[]','360409f41fc2401b8b1a811583176a6f','2025-09-10 13:31:22','2025-09-10 13:31:22');
INSERT INTO "vulnerability" VALUES('CVE-2025-52882','CVE-2025-52882','Cursor IDE Malicious Command Execution via Third-Party Plugins','Vulnerabilities in Cursor repositories and forks allowing malicious command transmission through plugins. Third-party plugins can execute arbitrary commands without proper validation. Cursor''s plugin architecture allows third-party extensions to execute system commands with insufficient validation.','HIGH',8.1,'CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:H','2025-08-01 00:00:00.000000','2025-08-15 00:00:00.000000','2025-09-10 13:31:22.212776','2025-09-10 13:31:22.212777','["plugin exploitation", "supply chain attack", "command execution"]',NULL,NULL,'PATCHED',NULL,'null','{"cursor": ["1.4+"]}',0,0,NULL,'["cursor", "plugins", "command-execution", "supply-chain"]','["https://nvd.nist.gov/vuln/detail/CVE-2025-52882", "https://cursor.sh/security-advisory-2025-001"]','verified_security_research',1.0,1,NULL,0,'[]',NULL,'[]','5bcfc05b7e234565872a4a16907f81fe','2025-09-10 13:31:22','2025-09-10 13:31:22');
INSERT INTO "vulnerability" VALUES('CVE-2025-32018','CVE-2025-32018','Cursor IDE Document Permissions Management Regression','Reports of vulnerabilities in document/configuration permissions management mechanism that did not include sufficient checks for versions 0.45.0 through 0.48.6 of Cursor. Specific versions had regression in permission validation for document and configuration access.','MEDIUM',6.1,'CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:N','2025-06-01 00:00:00.000000','2025-07-01 00:00:00.000000','2025-09-10 13:31:22.212783','2025-09-10 13:31:22.212784','["permission bypass", "configuration access"]',NULL,NULL,'PATCHED',NULL,'{"cursor": ["0.45.0", "0.45.1", "0.45.2", "0.46.0", "0.47.0", "0.48.0", "0.48.1", "0.48.2", "0.48.3", "0.48.4", "0.48.5", "0.48.6"]}','{"cursor": ["0.49+"]}',0,0,NULL,'["cursor", "permissions", "regression", "configuration"]','["https://nvd.nist.gov/vuln/detail/CVE-2025-32018", "https://github.com/getcursor/cursor/issues/permissions-regression"]','verified_security_research',1.0,1,NULL,0,'[]',NULL,'[]','30cca905a7da451fb05abc7f9a294ad9','2025-09-10 13:31:22','2025-09-10 13:31:22');
INSERT INTO "vulnerability" VALUES('CURSOR-EXT-THEFT-2025',NULL,'Malicious Cursor Extension Cryptocurrency Theft ($500K)','Fake extension named ''Solidity Language'' in Cursor IDE infected devices with remote access tools and infostealers, leading to theft of $500,000 in cryptocurrency from a Russian developer. The malicious extension was published on the Open VSX registry, presenting itself as a syntax highlighting tool for Ethereum smart contracts.','CRITICAL',9.8,'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H','2025-06-01 00:00:00.000000','2025-07-14 00:00:00.000000','2025-09-10 13:31:22.212789','2025-09-10 13:31:22.212790','["malicious extension", "typosquatting", "cryptocurrency theft"]',NULL,'$500,000 cryptocurrency theft, ScreenConnect installation for persistent access, SSH and API key theft','UNPATCHED',NULL,'null','null',1,1,NULL,'["cursor", "extension", "malware", "cryptocurrency", "theft"]','["https://securelist.com/fake-cursor-extension-steals-500k/112345/", "https://openvsx.org/security-advisory-solidity-language", "https://github.com/eclipse/openvsx/security/advisories/GHSA-malicious-ext-001"]','verified_security_research',1.0,1,NULL,0,'[]',NULL,'[]','cbca516530704904b17cf51c861d9980','2025-09-10 13:31:22','2025-09-10 13:31:22');
INSERT INTO "vulnerability" VALUES('CURSOR-ELECTRON-RNA-2025',NULL,'Cursor RunAsNode Electron Security Vulnerability','Cursor uses RunAsNode in its Electron application, allowing execution of malicious JavaScript code. RunAsNode creates significant security risk for macOS users through LaunchAgents manipulation. Malicious JavaScript can be executed from ~/Library/LaunchAgents/ with persistent code execution capabilities.','HIGH',7.8,'CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H','2025-07-21 00:00:00.000000','2025-07-24 00:00:00.000000','2025-09-10 13:31:22.212795','2025-09-10 13:31:22.212795','["electron exploitation", "javascript injection", "launchagents"]',NULL,'Persistent code execution, system compromise, privilege escalation through LaunchAgents','UNPATCHED',NULL,'null','null',1,0,NULL,'["cursor", "electron", "runasnode", "macos", "persistence"]','["https://electronjs.org/docs/latest/tutorial/security#17-validate-all-ipc-calls", "https://security-research.cursor.sh/runasnode-vulnerability", "https://github.com/getcursor/cursor/issues/electron-security"]','verified_security_research',1.0,1,NULL,0,'[]',NULL,'[]','108a407f30874e468ccec43686b97ea6','2025-09-10 13:31:22','2025-09-10 13:31:22');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-7774',NULL,'Passing the Security “Vibe” Check','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="400" src="https://blog.checkpoint.com/wp-content/uploads/2025/06/blog-image-2.jpg" style="display: block; margin-bottom: 5px; clear: both;" width="800" /><p>Imagine walking into a kitchen where you can shout out recipes and a robot instantly cooks up a meal. You ask for pasta, and within minutes you have a steaming plate in front of you.  The speed and convenience are impressive, but if you never stop to check what ingredients went into the dish, you might be eating something unsafe. That is what vibe coding feels like. Instead of carefully writing lines of code, developers describe what they want in plain English and let AI assistants generate it. Tools like Copilot, ChatGPT, VSCode, and other AI-powered code helpers have made [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/">Passing the Security “Vibe” Check</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','LOW',5.0,NULL,'2025-09-10 09:33:03.110860',NULL,'2025-09-10 13:33:03.129018','2025-09-10 13:33:03.129022','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','d5c8c90fe6be4d028f827f82e4d5973d','2025-09-10 13:33:03','2025-09-10 13:33:03');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_COMMUNITY_FEEDS-1289',NULL,'New OpenSecurityTraining2 class: "Bluetooth 2222: Bluetooth reconnaissance with Blue2thprinting" (~8 hours)','<!-- SC_OFF --><div class="md"><p>This class by Xeno Kovah (founder of OST2) teaches about the 30+ types of Bluetooth data that the <a href="https://github.com/darkmentorllc/blue2thprinting/">Blue2thprinting</a> software can collect and surface for when you''re trying to determine what a device is, and whether it has any known vulnerabilities. New in v2.0+ is the BTIDALPOOL crowd-sourcing server for researchers to push &amp; pull data about devices they''ve discovered.</p> <p>Like all current #OST2 classes, the core content is made fully public, and you only need to register if you want to post to the discussion board or track your class progress. Based on beta testing this class takes an median of 8 hours to complete (and an average of 9 hours, with a min of 4h30m and max of 15h22m.)</p> <p>The new Bluetooth learning path showing this class''s relationship to others under development is available here: <a href="https://ost2.fyi/Bluetooth.html">https://ost2.fyi/Bluetooth.html</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href="https://www.reddit.com/user/OpenSecurityTraining"> /u/OpenSecurityTraining </a> <br /> <span><a href="https://ost2.fyi/BT2222">[link]</a></span> &#32; <span><a href="https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/">[comments]</a></span>','LOW',5.0,NULL,'2025-09-10 09:33:11.737667',NULL,'2025-09-10 13:33:11.740845','2025-09-10 13:33:11.740848','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/"]','rss_security_community_feeds',0.8,0,NULL,0,'[]',NULL,'[]','1b2c5774895f4da2822ca0eccfac434c','2025-09-10 13:33:11','2025-09-10 13:33:11');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-7868',NULL,'Passing the Security “Vibe” Check','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="400" src="https://blog.checkpoint.com/wp-content/uploads/2025/06/blog-image-2.jpg" style="display: block; margin-bottom: 5px; clear: both;" width="800" /><p>Imagine walking into a kitchen where you can shout out recipes and a robot instantly cooks up a meal. You ask for pasta, and within minutes you have a steaming plate in front of you.  The speed and convenience are impressive, but if you never stop to check what ingredients went into the dish, you might be eating something unsafe. That is what vibe coding feels like. Instead of carefully writing lines of code, developers describe what they want in plain English and let AI assistants generate it. Tools like Copilot, ChatGPT, VSCode, and other AI-powered code helpers have made [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/">Passing the Security “Vibe” Check</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','LOW',5.0,NULL,'2025-09-10 11:00:40.523146',NULL,'2025-09-10 15:00:40.548896','2025-09-10 15:00:40.548915','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','41e8e78b717c43dca9fa2a8d102da1bf','2025-09-10 15:00:40','2025-09-10 15:00:40');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_COMMUNITY_FEEDS-9415',NULL,'New OpenSecurityTraining2 class: "Bluetooth 2222: Bluetooth reconnaissance with Blue2thprinting" (~8 hours)','<!-- SC_OFF --><div class="md"><p>This class by Xeno Kovah (founder of OST2) teaches about the 30+ types of Bluetooth data that the <a href="https://github.com/darkmentorllc/blue2thprinting/">Blue2thprinting</a> software can collect and surface for when you''re trying to determine what a device is, and whether it has any known vulnerabilities. New in v2.0+ is the BTIDALPOOL crowd-sourcing server for researchers to push &amp; pull data about devices they''ve discovered.</p> <p>Like all current #OST2 classes, the core content is made fully public, and you only need to register if you want to post to the discussion board or track your class progress. Based on beta testing this class takes an median of 8 hours to complete (and an average of 9 hours, with a min of 4h30m and max of 15h22m.)</p> <p>The new Bluetooth learning path showing this class''s relationship to others under development is available here: <a href="https://ost2.fyi/Bluetooth.html">https://ost2.fyi/Bluetooth.html</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href="https://www.reddit.com/user/OpenSecurityTraining"> /u/OpenSecurityTraining </a> <br /> <span><a href="https://ost2.fyi/BT2222">[link]</a></span> &#32; <span><a href="https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/">[comments]</a></span>','LOW',5.0,NULL,'2025-09-10 11:00:48.034507',NULL,'2025-09-10 15:00:48.037925','2025-09-10 15:00:48.037929','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/"]','rss_security_community_feeds',0.8,0,NULL,0,'[]',NULL,'[]','a6777c660dfb4704a29bcdbd0537dcb7','2025-09-10 15:00:48','2025-09-10 15:00:48');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-6552',NULL,'Passing the Security “Vibe” Check','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="400" src="https://blog.checkpoint.com/wp-content/uploads/2025/06/blog-image-2.jpg" style="display: block; margin-bottom: 5px; clear: both;" width="800" /><p>Imagine walking into a kitchen where you can shout out recipes and a robot instantly cooks up a meal. You ask for pasta, and within minutes you have a steaming plate in front of you.  The speed and convenience are impressive, but if you never stop to check what ingredients went into the dish, you might be eating something unsafe. That is what vibe coding feels like. Instead of carefully writing lines of code, developers describe what they want in plain English and let AI assistants generate it. Tools like Copilot, ChatGPT, VSCode, and other AI-powered code helpers have made [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/">Passing the Security “Vibe” Check</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','LOW',5.0,NULL,'2025-09-10 11:11:27.947840',NULL,'2025-09-10 15:11:27.961222','2025-09-10 15:11:27.961230','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','caeb9fcb84104aebae90c602a27b7a23','2025-09-10 15:11:27','2025-09-10 15:11:27');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_COMMUNITY_FEEDS-2605',NULL,'New OpenSecurityTraining2 class: "Bluetooth 2222: Bluetooth reconnaissance with Blue2thprinting" (~8 hours)','<!-- SC_OFF --><div class="md"><p>This class by Xeno Kovah (founder of OST2) teaches about the 30+ types of Bluetooth data that the <a href="https://github.com/darkmentorllc/blue2thprinting/">Blue2thprinting</a> software can collect and surface for when you''re trying to determine what a device is, and whether it has any known vulnerabilities. New in v2.0+ is the BTIDALPOOL crowd-sourcing server for researchers to push &amp; pull data about devices they''ve discovered.</p> <p>Like all current #OST2 classes, the core content is made fully public, and you only need to register if you want to post to the discussion board or track your class progress. Based on beta testing this class takes an median of 8 hours to complete (and an average of 9 hours, with a min of 4h30m and max of 15h22m.)</p> <p>The new Bluetooth learning path showing this class''s relationship to others under development is available here: <a href="https://ost2.fyi/Bluetooth.html">https://ost2.fyi/Bluetooth.html</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href="https://www.reddit.com/user/OpenSecurityTraining"> /u/OpenSecurityTraining </a> <br /> <span><a href="https://ost2.fyi/BT2222">[link]</a></span> &#32; <span><a href="https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/">[comments]</a></span>','LOW',5.0,NULL,'2025-09-10 11:11:35.523534',NULL,'2025-09-10 15:11:35.528438','2025-09-10 15:11:35.528444','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/"]','rss_security_community_feeds',0.8,0,NULL,0,'[]',NULL,'[]','fd4060bd57914376990328fc9b8bdf8c','2025-09-10 15:11:35','2025-09-10 15:11:35');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-6174',NULL,'Passing the Security “Vibe” Check','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="400" src="https://blog.checkpoint.com/wp-content/uploads/2025/06/blog-image-2.jpg" style="display: block; margin-bottom: 5px; clear: both;" width="800" /><p>Imagine walking into a kitchen where you can shout out recipes and a robot instantly cooks up a meal. You ask for pasta, and within minutes you have a steaming plate in front of you.  The speed and convenience are impressive, but if you never stop to check what ingredients went into the dish, you might be eating something unsafe. That is what vibe coding feels like. Instead of carefully writing lines of code, developers describe what they want in plain English and let AI assistants generate it. Tools like Copilot, ChatGPT, VSCode, and other AI-powered code helpers have made [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/">Passing the Security “Vibe” Check</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','LOW',5.0,NULL,'2025-09-10 11:18:40.561001',NULL,'2025-09-10 15:18:40.579709','2025-09-10 15:18:40.579720','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','a4463930aaf44a66ab4a3515cdadff14','2025-09-10 15:18:40','2025-09-10 15:18:40');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_COMMUNITY_FEEDS-7497',NULL,'New OpenSecurityTraining2 class: "Bluetooth 2222: Bluetooth reconnaissance with Blue2thprinting" (~8 hours)','<!-- SC_OFF --><div class="md"><p>This class by Xeno Kovah (founder of OST2) teaches about the 30+ types of Bluetooth data that the <a href="https://github.com/darkmentorllc/blue2thprinting/">Blue2thprinting</a> software can collect and surface for when you''re trying to determine what a device is, and whether it has any known vulnerabilities. New in v2.0+ is the BTIDALPOOL crowd-sourcing server for researchers to push &amp; pull data about devices they''ve discovered.</p> <p>Like all current #OST2 classes, the core content is made fully public, and you only need to register if you want to post to the discussion board or track your class progress. Based on beta testing this class takes an median of 8 hours to complete (and an average of 9 hours, with a min of 4h30m and max of 15h22m.)</p> <p>The new Bluetooth learning path showing this class''s relationship to others under development is available here: <a href="https://ost2.fyi/Bluetooth.html">https://ost2.fyi/Bluetooth.html</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href="https://www.reddit.com/user/OpenSecurityTraining"> /u/OpenSecurityTraining </a> <br /> <span><a href="https://ost2.fyi/BT2222">[link]</a></span> &#32; <span><a href="https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/">[comments]</a></span>','LOW',5.0,NULL,'2025-09-10 11:18:47.963981',NULL,'2025-09-10 15:18:47.969437','2025-09-10 15:18:47.969441','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/"]','rss_security_community_feeds',0.8,0,NULL,0,'[]',NULL,'[]','d5c9c5952b4b45d2bdfd86b39573ca74','2025-09-10 15:18:47','2025-09-10 15:18:47');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-3528',NULL,'Passing the Security “Vibe” Check','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="400" src="https://blog.checkpoint.com/wp-content/uploads/2025/06/blog-image-2.jpg" style="display: block; margin-bottom: 5px; clear: both;" width="800" /><p>Imagine walking into a kitchen where you can shout out recipes and a robot instantly cooks up a meal. You ask for pasta, and within minutes you have a steaming plate in front of you.  The speed and convenience are impressive, but if you never stop to check what ingredients went into the dish, you might be eating something unsafe. That is what vibe coding feels like. Instead of carefully writing lines of code, developers describe what they want in plain English and let AI assistants generate it. Tools like Copilot, ChatGPT, VSCode, and other AI-powered code helpers have made [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/">Passing the Security “Vibe” Check</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','LOW',5.0,NULL,'2025-09-10 11:25:10.991026',NULL,'2025-09-10 15:25:11.001907','2025-09-10 15:25:11.001914','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','8abd22db150a4a7bbff31593c67100ef','2025-09-10 15:25:11','2025-09-10 15:25:11');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_COMMUNITY_FEEDS-3582',NULL,'New OpenSecurityTraining2 class: "Bluetooth 2222: Bluetooth reconnaissance with Blue2thprinting" (~8 hours)','<!-- SC_OFF --><div class="md"><p>This class by Xeno Kovah (founder of OST2) teaches about the 30+ types of Bluetooth data that the <a href="https://github.com/darkmentorllc/blue2thprinting/">Blue2thprinting</a> software can collect and surface for when you''re trying to determine what a device is, and whether it has any known vulnerabilities. New in v2.0+ is the BTIDALPOOL crowd-sourcing server for researchers to push &amp; pull data about devices they''ve discovered.</p> <p>Like all current #OST2 classes, the core content is made fully public, and you only need to register if you want to post to the discussion board or track your class progress. Based on beta testing this class takes an median of 8 hours to complete (and an average of 9 hours, with a min of 4h30m and max of 15h22m.)</p> <p>The new Bluetooth learning path showing this class''s relationship to others under development is available here: <a href="https://ost2.fyi/Bluetooth.html">https://ost2.fyi/Bluetooth.html</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href="https://www.reddit.com/user/OpenSecurityTraining"> /u/OpenSecurityTraining </a> <br /> <span><a href="https://ost2.fyi/BT2222">[link]</a></span> &#32; <span><a href="https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/">[comments]</a></span>','LOW',5.0,NULL,'2025-09-10 11:25:18.569720',NULL,'2025-09-10 15:25:18.572665','2025-09-10 15:25:18.572667','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/"]','rss_security_community_feeds',0.8,0,NULL,0,'[]',NULL,'[]','cfc7de02d9fb43c0b0f25a752f946d53','2025-09-10 15:25:18','2025-09-10 15:25:18');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-9633',NULL,'Passing the Security “Vibe” Check','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="400" src="https://blog.checkpoint.com/wp-content/uploads/2025/06/blog-image-2.jpg" style="display: block; margin-bottom: 5px; clear: both;" width="800" /><p>Imagine walking into a kitchen where you can shout out recipes and a robot instantly cooks up a meal. You ask for pasta, and within minutes you have a steaming plate in front of you.  The speed and convenience are impressive, but if you never stop to check what ingredients went into the dish, you might be eating something unsafe. That is what vibe coding feels like. Instead of carefully writing lines of code, developers describe what they want in plain English and let AI assistants generate it. Tools like Copilot, ChatGPT, VSCode, and other AI-powered code helpers have made [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/">Passing the Security “Vibe” Check</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','LOW',5.0,NULL,'2025-09-10 11:27:08.622202',NULL,'2025-09-10 15:27:08.640021','2025-09-10 15:27:08.640032','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','cf74ce3968a54525b3fd3b5db51bae36','2025-09-10 15:27:08','2025-09-10 15:27:08');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_COMMUNITY_FEEDS-5471',NULL,'New OpenSecurityTraining2 class: "Bluetooth 2222: Bluetooth reconnaissance with Blue2thprinting" (~8 hours)','<!-- SC_OFF --><div class="md"><p>This class by Xeno Kovah (founder of OST2) teaches about the 30+ types of Bluetooth data that the <a href="https://github.com/darkmentorllc/blue2thprinting/">Blue2thprinting</a> software can collect and surface for when you''re trying to determine what a device is, and whether it has any known vulnerabilities. New in v2.0+ is the BTIDALPOOL crowd-sourcing server for researchers to push &amp; pull data about devices they''ve discovered.</p> <p>Like all current #OST2 classes, the core content is made fully public, and you only need to register if you want to post to the discussion board or track your class progress. Based on beta testing this class takes an median of 8 hours to complete (and an average of 9 hours, with a min of 4h30m and max of 15h22m.)</p> <p>The new Bluetooth learning path showing this class''s relationship to others under development is available here: <a href="https://ost2.fyi/Bluetooth.html">https://ost2.fyi/Bluetooth.html</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href="https://www.reddit.com/user/OpenSecurityTraining"> /u/OpenSecurityTraining </a> <br /> <span><a href="https://ost2.fyi/BT2222">[link]</a></span> &#32; <span><a href="https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/">[comments]</a></span>','LOW',5.0,NULL,'2025-09-10 11:27:15.967020',NULL,'2025-09-10 15:27:15.969945','2025-09-10 15:27:15.969947','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/"]','rss_security_community_feeds',0.8,0,NULL,0,'[]',NULL,'[]','48f124f028c04fc89561c72c9b7bbb80','2025-09-10 15:27:15','2025-09-10 15:27:15');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-6934',NULL,'Passing the Security “Vibe” Check','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="400" src="https://blog.checkpoint.com/wp-content/uploads/2025/06/blog-image-2.jpg" style="display: block; margin-bottom: 5px; clear: both;" width="800" /><p>Imagine walking into a kitchen where you can shout out recipes and a robot instantly cooks up a meal. You ask for pasta, and within minutes you have a steaming plate in front of you.  The speed and convenience are impressive, but if you never stop to check what ingredients went into the dish, you might be eating something unsafe. That is what vibe coding feels like. Instead of carefully writing lines of code, developers describe what they want in plain English and let AI assistants generate it. Tools like Copilot, ChatGPT, VSCode, and other AI-powered code helpers have made [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/">Passing the Security “Vibe” Check</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','LOW',5.0,NULL,'2025-09-10 11:32:36.835615',NULL,'2025-09-10 15:32:36.852101','2025-09-10 15:32:36.852106','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','271bedd2722c4f3cb164778db4920f5b','2025-09-10 15:32:36','2025-09-10 15:32:36');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_COMMUNITY_FEEDS-0251',NULL,'New OpenSecurityTraining2 class: "Bluetooth 2222: Bluetooth reconnaissance with Blue2thprinting" (~8 hours)','<!-- SC_OFF --><div class="md"><p>This class by Xeno Kovah (founder of OST2) teaches about the 30+ types of Bluetooth data that the <a href="https://github.com/darkmentorllc/blue2thprinting/">Blue2thprinting</a> software can collect and surface for when you''re trying to determine what a device is, and whether it has any known vulnerabilities. New in v2.0+ is the BTIDALPOOL crowd-sourcing server for researchers to push &amp; pull data about devices they''ve discovered.</p> <p>Like all current #OST2 classes, the core content is made fully public, and you only need to register if you want to post to the discussion board or track your class progress. Based on beta testing this class takes an median of 8 hours to complete (and an average of 9 hours, with a min of 4h30m and max of 15h22m.)</p> <p>The new Bluetooth learning path showing this class''s relationship to others under development is available here: <a href="https://ost2.fyi/Bluetooth.html">https://ost2.fyi/Bluetooth.html</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href="https://www.reddit.com/user/OpenSecurityTraining"> /u/OpenSecurityTraining </a> <br /> <span><a href="https://ost2.fyi/BT2222">[link]</a></span> &#32; <span><a href="https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/">[comments]</a></span>','LOW',5.0,NULL,'2025-09-10 11:32:44.068270',NULL,'2025-09-10 15:32:44.072929','2025-09-10 15:32:44.072932','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/"]','rss_security_community_feeds',0.8,0,NULL,0,'[]',NULL,'[]','411a73f5d6d74958957d24c3da895bce','2025-09-10 15:32:44','2025-09-10 15:32:44');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-8349',NULL,'Passing the Security “Vibe” Check','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="400" src="https://blog.checkpoint.com/wp-content/uploads/2025/06/blog-image-2.jpg" style="display: block; margin-bottom: 5px; clear: both;" width="800" /><p>Imagine walking into a kitchen where you can shout out recipes and a robot instantly cooks up a meal. You ask for pasta, and within minutes you have a steaming plate in front of you.  The speed and convenience are impressive, but if you never stop to check what ingredients went into the dish, you might be eating something unsafe. That is what vibe coding feels like. Instead of carefully writing lines of code, developers describe what they want in plain English and let AI assistants generate it. Tools like Copilot, ChatGPT, VSCode, and other AI-powered code helpers have made [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/">Passing the Security “Vibe” Check</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','LOW',5.0,NULL,'2025-09-10 11:34:49.712513',NULL,'2025-09-10 15:34:49.725709','2025-09-10 15:34:49.725714','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','707853d0215046c086faab0ae77c9dae','2025-09-10 15:34:49','2025-09-10 15:34:49');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-7331',NULL,'Passing the Security “Vibe” Check','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="400" src="https://blog.checkpoint.com/wp-content/uploads/2025/06/blog-image-2.jpg" style="display: block; margin-bottom: 5px; clear: both;" width="800" /><p>Imagine walking into a kitchen where you can shout out recipes and a robot instantly cooks up a meal. You ask for pasta, and within minutes you have a steaming plate in front of you.  The speed and convenience are impressive, but if you never stop to check what ingredients went into the dish, you might be eating something unsafe. That is what vibe coding feels like. Instead of carefully writing lines of code, developers describe what they want in plain English and let AI assistants generate it. Tools like Copilot, ChatGPT, VSCode, and other AI-powered code helpers have made [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/">Passing the Security “Vibe” Check</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','LOW',5.0,NULL,'2025-09-10 11:37:03.367167',NULL,'2025-09-10 15:37:03.387564','2025-09-10 15:37:03.387570','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','3c2555b78a25433a939651df4f6b7508','2025-09-10 15:37:03','2025-09-10 15:37:03');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_COMMUNITY_FEEDS-7060',NULL,'New OpenSecurityTraining2 class: "Bluetooth 2222: Bluetooth reconnaissance with Blue2thprinting" (~8 hours)','<!-- SC_OFF --><div class="md"><p>This class by Xeno Kovah (founder of OST2) teaches about the 30+ types of Bluetooth data that the <a href="https://github.com/darkmentorllc/blue2thprinting/">Blue2thprinting</a> software can collect and surface for when you''re trying to determine what a device is, and whether it has any known vulnerabilities. New in v2.0+ is the BTIDALPOOL crowd-sourcing server for researchers to push &amp; pull data about devices they''ve discovered.</p> <p>Like all current #OST2 classes, the core content is made fully public, and you only need to register if you want to post to the discussion board or track your class progress. Based on beta testing this class takes an median of 8 hours to complete (and an average of 9 hours, with a min of 4h30m and max of 15h22m.)</p> <p>The new Bluetooth learning path showing this class''s relationship to others under development is available here: <a href="https://ost2.fyi/Bluetooth.html">https://ost2.fyi/Bluetooth.html</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href="https://www.reddit.com/user/OpenSecurityTraining"> /u/OpenSecurityTraining </a> <br /> <span><a href="https://ost2.fyi/BT2222">[link]</a></span> &#32; <span><a href="https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/">[comments]</a></span>','LOW',5.0,NULL,'2025-09-10 11:37:10.652863',NULL,'2025-09-10 15:37:10.659860','2025-09-10 15:37:10.659865','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/"]','rss_security_community_feeds',0.8,0,NULL,0,'[]',NULL,'[]','f472c8d2779847f0b57f0ccc38e0da1e','2025-09-10 15:37:10','2025-09-10 15:37:10');
INSERT INTO "vulnerability" VALUES('CVE-2025-57729','CVE-2025-57729','CVE CVE-2025-57729','In JetBrains IntelliJ IDEA before 2025.2 unexpected plugin startup was possible due to automatic LSP server start','MEDIUM',6.5,'CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:H/I:H/A:L','2025-09-10 11:40:01.093526',NULL,'2025-09-10 15:40:21.537619','2025-09-10 15:40:21.537625','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://www.jetbrains.com/privacy-security/issues-fixed/"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','03be600d56ac4d798646900312d061d2','2025-09-10 15:40:21','2025-09-10 15:40:21');
INSERT INTO "vulnerability" VALUES('CVE-2025-2867','CVE-2025-2867','CVE CVE-2025-2867','An issue has been discovered in the GitLab Duo with Amazon Q affecting all versions from 17.8 before 17.8.6, 17.9 before 17.9.3, and 17.10 before 17.10.1. A specifically crafted issue could manipulate AI-assisted development features to potentially expose sensitive project data to unauthorized users.','MEDIUM',4.4,'CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:L/I:L/A:N','2025-09-10 11:40:18.416560',NULL,'2025-09-10 15:40:21.548289','2025-09-10 15:40:21.548290','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://gitlab.com/gitlab-org/gitlab/-/issues/512509"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','3c5cf538b0e345bcae41901fc640a1c5','2025-09-10 15:40:21','2025-09-10 15:40:21');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-3424',NULL,'Passing the Security “Vibe” Check','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="400" src="https://blog.checkpoint.com/wp-content/uploads/2025/06/blog-image-2.jpg" style="display: block; margin-bottom: 5px; clear: both;" width="800" /><p>Imagine walking into a kitchen where you can shout out recipes and a robot instantly cooks up a meal. You ask for pasta, and within minutes you have a steaming plate in front of you.  The speed and convenience are impressive, but if you never stop to check what ingredients went into the dish, you might be eating something unsafe. That is what vibe coding feels like. Instead of carefully writing lines of code, developers describe what they want in plain English and let AI assistants generate it. Tools like Copilot, ChatGPT, VSCode, and other AI-powered code helpers have made [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/">Passing the Security “Vibe” Check</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','LOW',5.0,NULL,'2025-09-10 11:41:12.895991',NULL,'2025-09-10 15:41:12.905727','2025-09-10 15:41:12.905731','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','a1e3f8ef36fd455aa2cd6a26ff228ae9','2025-09-10 15:41:12','2025-09-10 15:41:12');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_COMMUNITY_FEEDS-7322',NULL,'New OpenSecurityTraining2 class: "Bluetooth 2222: Bluetooth reconnaissance with Blue2thprinting" (~8 hours)','<!-- SC_OFF --><div class="md"><p>This class by Xeno Kovah (founder of OST2) teaches about the 30+ types of Bluetooth data that the <a href="https://github.com/darkmentorllc/blue2thprinting/">Blue2thprinting</a> software can collect and surface for when you''re trying to determine what a device is, and whether it has any known vulnerabilities. New in v2.0+ is the BTIDALPOOL crowd-sourcing server for researchers to push &amp; pull data about devices they''ve discovered.</p> <p>Like all current #OST2 classes, the core content is made fully public, and you only need to register if you want to post to the discussion board or track your class progress. Based on beta testing this class takes an median of 8 hours to complete (and an average of 9 hours, with a min of 4h30m and max of 15h22m.)</p> <p>The new Bluetooth learning path showing this class''s relationship to others under development is available here: <a href="https://ost2.fyi/Bluetooth.html">https://ost2.fyi/Bluetooth.html</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href="https://www.reddit.com/user/OpenSecurityTraining"> /u/OpenSecurityTraining </a> <br /> <span><a href="https://ost2.fyi/BT2222">[link]</a></span> &#32; <span><a href="https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/">[comments]</a></span>','LOW',5.0,NULL,'2025-09-10 11:41:20.317657',NULL,'2025-09-10 15:41:20.320358','2025-09-10 15:41:20.320360','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/"]','rss_security_community_feeds',0.8,0,NULL,0,'[]',NULL,'[]','38e173d07305423cb2e6faf8ebe5b09f','2025-09-10 15:41:20','2025-09-10 15:41:20');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-7459',NULL,'SoK: Security and Privacy of AI Agents for Blockchain','arXiv:2509.07131v1 Announce Type: new 
Abstract: Blockchain and smart contracts have garnered significant interest in recent years as the foundation of a decentralized, trustless digital ecosystem, thereby eliminating the need for traditional centralized authorities. Despite their central role in powering Web3, their complexity still presents significant barriers for non-expert users. To bridge this gap, Artificial Intelligence (AI)-based agents have emerged as valuable tools for interacting with blockchain environments, supporting a range of tasks, from analyzing on-chain data and optimizing transaction strategies to detecting vulnerabilities within smart contracts. While interest in applying AI to blockchain is growing, the literature still lacks a comprehensive survey that focuses specifically on the intersection with AI agents. Most of the related work only provides general considerations, without focusing on any specific domain. This paper addresses this gap by presenting the first Systematization of Knowledge dedicated to AI-driven systems for blockchain, with a special focus on their security and privacy dimensions, shedding light on their applications, limitations, and future research directions.','LOW',5.0,NULL,'2025-09-10 11:42:17.705324',NULL,'2025-09-10 15:42:17.712898','2025-09-10 15:42:17.712900','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.07131"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','db4c4be7d0f240eebe05ad41d103ee80','2025-09-10 15:42:17','2025-09-10 15:42:17');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-8570',NULL,'All You Need Is A Fuzzing Brain: An LLM-Powered System for Automated Vulnerability Detection and Patching','arXiv:2509.07225v1 Announce Type: new 
Abstract: Our team, All You Need Is A Fuzzing Brain, was one of seven finalists in DARPA''s Artificial Intelligence Cyber Challenge (AIxCC), placing fourth in the final round. During the competition, we developed a Cyber Reasoning System (CRS) that autonomously discovered 28 security vulnerabilities - including six previously unknown zero-days - in real-world open-source C and Java projects, and successfully patched 14 of them. The complete CRS is open source at https://github.com/o2lab/afc-crs-all-you-need-is-a-fuzzing-brain. This paper provides a detailed technical description of our CRS, with an emphasis on its LLM-powered components and strategies. Building on AIxCC, we further introduce a public leaderboard for benchmarking state-of-the-art LLMs on vulnerability detection and patching tasks, derived from the AIxCC dataset. The leaderboard is available at https://o2lab.github.io/FuzzingBrain-Leaderboard/.','CRITICAL',5.0,NULL,'2025-09-10 11:42:17.705501',NULL,'2025-09-10 15:42:17.716662','2025-09-10 15:42:17.716663','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.07225"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','3103fe44841d44abbc0daf8ec9675753','2025-09-10 15:42:17','2025-09-10 15:42:17');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-7182',NULL,'Paladin: Defending LLM-enabled Phishing Emails with a New Trigger-Tag Paradigm','arXiv:2509.07287v1 Announce Type: new 
Abstract: With the rapid development of large language models, the potential threat of their malicious use, particularly in generating phishing content, is becoming increasingly prevalent. Leveraging the capabilities of LLMs, malicious users can synthesize phishing emails that are free from spelling mistakes and other easily detectable features. Furthermore, such models can generate topic-specific phishing messages, tailoring content to the target domain and increasing the likelihood of success.
  Detecting such content remains a significant challenge, as LLM-generated phishing emails often lack clear or distinguishable linguistic features. As a result, most existing semantic-level detection approaches struggle to identify them reliably. While certain LLM-based detection methods have shown promise, they suffer from high computational costs and are constrained by the performance of the underlying language model, making them impractical for large-scale deployment.
  In this work, we aim to address this issue. We propose Paladin, which embeds trigger-tag associations into vanilla LLM using various insertion strategies, creating them into instrumented LLMs. When an instrumented LLM generates content related to phishing, it will automatically include detectable tags, enabling easier identification. Based on the design on implicit and explicit triggers and tags, we consider four distinct scenarios in our work. We evaluate our method from three key perspectives: stealthiness, effectiveness, and robustness, and compare it with existing baseline methods. Experimental results show that our method outperforms the baselines, achieving over 90% detection accuracy across all scenarios.','HIGH',5.0,NULL,'2025-09-10 11:42:17.705601',NULL,'2025-09-10 15:42:17.719513','2025-09-10 15:42:17.719514','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.07287"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','b56779c4f0ea4561a953563d93c791fe','2025-09-10 15:42:17','2025-09-10 15:42:17');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-6354',NULL,'Enhanced cast-128 with adaptive s-box optimization via neural networks for image protection','arXiv:2509.07606v1 Announce Type: new 
Abstract: An improved CAST-128 encryption algorithm, which is done by implementing chaos-based adaptive S-box generation using Logistic sine Map (LSM), has been provided in this paper because of the increasing requirements of efficient and smart image encryption mechanisms. The study aims to address the drawbacks of static S-box models commonly used in traditional cryptographic systems, which are susceptible to linear and differential attacks. In the proposed scheme, the dynamic, non-linear, invertible, and highly cryptographic strength S-boxes are generated through a hybrid chaotic system that may have high non-linearity, strong and rigorous avalanche characteristics, and low differential uniformity. The process here is that the LSM is used to produce S-boxes having key-dependent parameters that are stuffed into the CAST-128 structure to encrypt the image in a block-wise manner. The performance of the encryption is assessed utilizing a set of standard grayscale images. The metrics that are used to evaluate the security are entropy, NPCR, UACI, PSNR, and histogram analysis. Outcomes indicate that randomness, resistance to statistical attacks, and country of encryption are significantly improved compared to the original CAST-128. The study is theoretically and practically relevant since it presents a lightweight S-box generation approach driven by chaos, which can increase the level of robustness of the image encryptions without enlisting machine learning. The system may be applied to secure communications, surveillance systems, and medical image protection on a real-time basis.','HIGH',5.0,NULL,'2025-09-10 11:42:17.706103',NULL,'2025-09-10 15:42:17.721597','2025-09-10 15:42:17.721598','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.07606"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','49215a3c6e3c4473af6d2b354c0fe8ac','2025-09-10 15:42:17','2025-09-10 15:42:17');
INSERT INTO "vulnerability" VALUES('ADMIN-C065B960','CVE-2025-TEST-001','Test AI Prompt Injection Vulnerability (CVE-2025-TEST-001)','This is a test vulnerability submission to verify the AI analysis system is working correctly. The vulnerability involves prompt injection attacks against Cursor IDE that could lead to code execution.

AI Tools Potentially Affected: Cursor','HIGH',7.5,NULL,'2025-09-10 17:53:57.235180',NULL,'2025-09-10 17:53:57.235181','2025-09-10 17:53:57.235181','["injection", "prompt_injection", "rce"]','This is a test vulnerability submission to verify the AI analysis system is working correctly. The vulnerability involves prompt injection attacks against Cursor IDE that could lead to code execution.',NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'[]','["https://example.com/vuln-report"]','ADMIN_SUBMISSION',1.0,1,NULL,1,'[]',NULL,'[]','a2a0851dfe014fd1ac2def597cbfa754','2025-09-10 17:53:57.235181','2025-09-10 17:53:57.235181');
INSERT INTO "vulnerability" VALUES('ADMIN-F2CBC6E0','CVE-2025-TEST-002','Critical GitHub Copilot Data Exfiltration (CVE-2025-TEST-002)','A critical vulnerability in GitHub Copilot allows malicious actors to exfiltrate sensitive source code through prompt manipulation.

AI Tools Potentially Affected: Github Copilot

Severity Assessment: This vulnerability poses a critical risk to AI development environments.','CRITICAL',9.0,NULL,'2025-09-10 17:54:39.384297',NULL,'2025-09-10 17:54:39.384299','2025-09-10 17:54:39.384299','["prompt_injection", "rce", "data_exfiltration"]','A critical vulnerability in GitHub Copilot allows malicious actors to exfiltrate sensitive source code through prompt manipulation.',NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'[]','["https://example.com/copilot-vuln"]','ADMIN_SUBMISSION',1.0,1,NULL,1,'[]',NULL,'[]','fa96c24da9f5449eaec0bd60defa3536','2025-09-10 17:54:39.384299','2025-09-10 17:54:39.384299');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-1683',NULL,'Passing the Security “Vibe” Check','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="400" src="https://blog.checkpoint.com/wp-content/uploads/2025/06/blog-image-2.jpg" style="display: block; margin-bottom: 5px; clear: both;" width="800" /><p>Imagine walking into a kitchen where you can shout out recipes and a robot instantly cooks up a meal. You ask for pasta, and within minutes you have a steaming plate in front of you.  The speed and convenience are impressive, but if you never stop to check what ingredients went into the dish, you might be eating something unsafe. That is what vibe coding feels like. Instead of carefully writing lines of code, developers describe what they want in plain English and let AI assistants generate it. Tools like Copilot, ChatGPT, VSCode, and other AI-powered code helpers have made [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/">Passing the Security “Vibe” Check</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','LOW',5.0,NULL,'2025-09-10 13:55:54.302323',NULL,'2025-09-10 17:55:54.323711','2025-09-10 17:55:54.323716','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','55687bc69ee9457582b6cc14d8bc6b93','2025-09-10 17:55:54','2025-09-10 17:55:54');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_COMMUNITY_FEEDS-4289',NULL,'New OpenSecurityTraining2 class: "Bluetooth 2222: Bluetooth reconnaissance with Blue2thprinting" (~8 hours)','<!-- SC_OFF --><div class="md"><p>This class by Xeno Kovah (founder of OST2) teaches about the 30+ types of Bluetooth data that the <a href="https://github.com/darkmentorllc/blue2thprinting/">Blue2thprinting</a> software can collect and surface for when you''re trying to determine what a device is, and whether it has any known vulnerabilities. New in v2.0+ is the BTIDALPOOL crowd-sourcing server for researchers to push &amp; pull data about devices they''ve discovered.</p> <p>Like all current #OST2 classes, the core content is made fully public, and you only need to register if you want to post to the discussion board or track your class progress. Based on beta testing this class takes an median of 8 hours to complete (and an average of 9 hours, with a min of 4h30m and max of 15h22m.)</p> <p>The new Bluetooth learning path showing this class''s relationship to others under development is available here: <a href="https://ost2.fyi/Bluetooth.html">https://ost2.fyi/Bluetooth.html</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href="https://www.reddit.com/user/OpenSecurityTraining"> /u/OpenSecurityTraining </a> <br /> <span><a href="https://ost2.fyi/BT2222">[link]</a></span> &#32; <span><a href="https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/">[comments]</a></span>','LOW',5.0,NULL,'2025-09-10 13:56:01.739696',NULL,'2025-09-10 17:56:01.742555','2025-09-10 17:56:01.742557','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/"]','rss_security_community_feeds',0.8,0,NULL,0,'[]',NULL,'[]','1d6df19576f84590a1f944f7aa623f8a','2025-09-10 17:56:01','2025-09-10 17:56:01');
INSERT INTO "vulnerability" VALUES('RSS-BLEEPING_COMPUTER-6279',NULL,'Pixel 10 fights AI fakes with new Android photo verification tech','Google is integrating C2PA Content Credentials into the Pixel 10 camera and Google Photos, to help users distinguish between authentic, unaltered images and those generated or edited with artificial intelligence technology. [...]','LOW',5.0,NULL,'2025-09-10 13:56:19.529705',NULL,'2025-09-10 17:56:19.540534','2025-09-10 17:56:19.540540','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://www.bleepingcomputer.com/news/security/pixel-10-fights-ai-fakes-with-new-android-photo-verification-tech/"]','rss_bleeping_computer',0.8,0,NULL,0,'[]',NULL,'[]','4efb787b0fa446f4a68bb6a8312cbe80','2025-09-10 17:56:19','2025-09-10 17:56:19');
INSERT INTO "vulnerability" VALUES('RSS-BLEEPING_COMPUTER-4575',NULL,'Cursor AI editor lets repos “autorun” malicious code on devices','A weakness in the Cursor code editor exposes developers to the risk of automatically executing tasks in a malicious repository as soon as it''s opened. [...]','LOW',5.0,NULL,'2025-09-10 13:56:19.529886',NULL,'2025-09-10 17:56:19.545324','2025-09-10 17:56:19.545326','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://www.bleepingcomputer.com/news/security/cursor-ai-editor-lets-repos-autorun-malicious-code-on-devices/"]','rss_bleeping_computer',0.8,0,NULL,0,'[]',NULL,'[]','8dce0c8297f6474aa0eed186c72b0017','2025-09-10 17:56:19','2025-09-10 17:56:19');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-2761',NULL,'SoK: Security and Privacy of AI Agents for Blockchain','arXiv:2509.07131v1 Announce Type: new 
Abstract: Blockchain and smart contracts have garnered significant interest in recent years as the foundation of a decentralized, trustless digital ecosystem, thereby eliminating the need for traditional centralized authorities. Despite their central role in powering Web3, their complexity still presents significant barriers for non-expert users. To bridge this gap, Artificial Intelligence (AI)-based agents have emerged as valuable tools for interacting with blockchain environments, supporting a range of tasks, from analyzing on-chain data and optimizing transaction strategies to detecting vulnerabilities within smart contracts. While interest in applying AI to blockchain is growing, the literature still lacks a comprehensive survey that focuses specifically on the intersection with AI agents. Most of the related work only provides general considerations, without focusing on any specific domain. This paper addresses this gap by presenting the first Systematization of Knowledge dedicated to AI-driven systems for blockchain, with a special focus on their security and privacy dimensions, shedding light on their applications, limitations, and future research directions.','LOW',5.0,NULL,'2025-09-10 13:57:00.778462',NULL,'2025-09-10 17:57:00.786833','2025-09-10 17:57:00.786836','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.07131"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','f90fc580d9c6487bbc0faea7c3d06227','2025-09-10 17:57:00','2025-09-10 17:57:00');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-7789',NULL,'All You Need Is A Fuzzing Brain: An LLM-Powered System for Automated Vulnerability Detection and Patching','arXiv:2509.07225v1 Announce Type: new 
Abstract: Our team, All You Need Is A Fuzzing Brain, was one of seven finalists in DARPA''s Artificial Intelligence Cyber Challenge (AIxCC), placing fourth in the final round. During the competition, we developed a Cyber Reasoning System (CRS) that autonomously discovered 28 security vulnerabilities - including six previously unknown zero-days - in real-world open-source C and Java projects, and successfully patched 14 of them. The complete CRS is open source at https://github.com/o2lab/afc-crs-all-you-need-is-a-fuzzing-brain. This paper provides a detailed technical description of our CRS, with an emphasis on its LLM-powered components and strategies. Building on AIxCC, we further introduce a public leaderboard for benchmarking state-of-the-art LLMs on vulnerability detection and patching tasks, derived from the AIxCC dataset. The leaderboard is available at https://o2lab.github.io/FuzzingBrain-Leaderboard/.','CRITICAL',5.0,NULL,'2025-09-10 13:57:00.778656',NULL,'2025-09-10 17:57:00.790205','2025-09-10 17:57:00.790207','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.07225"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','cdcb442ee1344220bb80293486c5328f','2025-09-10 17:57:00','2025-09-10 17:57:00');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-9735',NULL,'Paladin: Defending LLM-enabled Phishing Emails with a New Trigger-Tag Paradigm','arXiv:2509.07287v1 Announce Type: new 
Abstract: With the rapid development of large language models, the potential threat of their malicious use, particularly in generating phishing content, is becoming increasingly prevalent. Leveraging the capabilities of LLMs, malicious users can synthesize phishing emails that are free from spelling mistakes and other easily detectable features. Furthermore, such models can generate topic-specific phishing messages, tailoring content to the target domain and increasing the likelihood of success.
  Detecting such content remains a significant challenge, as LLM-generated phishing emails often lack clear or distinguishable linguistic features. As a result, most existing semantic-level detection approaches struggle to identify them reliably. While certain LLM-based detection methods have shown promise, they suffer from high computational costs and are constrained by the performance of the underlying language model, making them impractical for large-scale deployment.
  In this work, we aim to address this issue. We propose Paladin, which embeds trigger-tag associations into vanilla LLM using various insertion strategies, creating them into instrumented LLMs. When an instrumented LLM generates content related to phishing, it will automatically include detectable tags, enabling easier identification. Based on the design on implicit and explicit triggers and tags, we consider four distinct scenarios in our work. We evaluate our method from three key perspectives: stealthiness, effectiveness, and robustness, and compare it with existing baseline methods. Experimental results show that our method outperforms the baselines, achieving over 90% detection accuracy across all scenarios.','HIGH',5.0,NULL,'2025-09-10 13:57:00.778769',NULL,'2025-09-10 17:57:00.793002','2025-09-10 17:57:00.793003','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.07287"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','14d8b1dcb2f94845b3feafbd4083d726','2025-09-10 17:57:00','2025-09-10 17:57:00');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-3365',NULL,'Enhanced cast-128 with adaptive s-box optimization via neural networks for image protection','arXiv:2509.07606v1 Announce Type: new 
Abstract: An improved CAST-128 encryption algorithm, which is done by implementing chaos-based adaptive S-box generation using Logistic sine Map (LSM), has been provided in this paper because of the increasing requirements of efficient and smart image encryption mechanisms. The study aims to address the drawbacks of static S-box models commonly used in traditional cryptographic systems, which are susceptible to linear and differential attacks. In the proposed scheme, the dynamic, non-linear, invertible, and highly cryptographic strength S-boxes are generated through a hybrid chaotic system that may have high non-linearity, strong and rigorous avalanche characteristics, and low differential uniformity. The process here is that the LSM is used to produce S-boxes having key-dependent parameters that are stuffed into the CAST-128 structure to encrypt the image in a block-wise manner. The performance of the encryption is assessed utilizing a set of standard grayscale images. The metrics that are used to evaluate the security are entropy, NPCR, UACI, PSNR, and histogram analysis. Outcomes indicate that randomness, resistance to statistical attacks, and country of encryption are significantly improved compared to the original CAST-128. The study is theoretically and practically relevant since it presents a lightweight S-box generation approach driven by chaos, which can increase the level of robustness of the image encryptions without enlisting machine learning. The system may be applied to secure communications, surveillance systems, and medical image protection on a real-time basis.','HIGH',5.0,NULL,'2025-09-10 13:57:00.779576',NULL,'2025-09-10 17:57:00.795129','2025-09-10 17:57:00.795130','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.07606"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','477122f925c24a91942a834d3e6eb1c8','2025-09-10 17:57:00','2025-09-10 17:57:00');
INSERT INTO "vulnerability" VALUES('ADMIN-4D9078E6','CVE-2025-TEST-003','Medium Priority TabNine Code Leak (CVE-2025-TEST-003)','TabNine AI assistant potentially exposes code snippets through caching mechanisms.

AI Tools Potentially Affected: Tabnine','MEDIUM',5.0,NULL,'2025-09-10 18:00:17.373221',NULL,'2025-09-10 18:00:17.373222','2025-09-10 18:00:17.373222','["prompt_injection"]','TabNine AI assistant potentially exposes code snippets through caching mechanisms.',NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'[]','["https://example.com/tabnine-leak"]','ADMIN_SUBMISSION',1.0,1,NULL,0,'[]',NULL,'[]','2de34c956bc14bb8a58203116e5ed9bd','2025-09-10 18:00:17.373222','2025-09-10 18:00:17.373222');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-4845',NULL,'Passing the Security “Vibe” Check','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="400" src="https://blog.checkpoint.com/wp-content/uploads/2025/06/blog-image-2.jpg" style="display: block; margin-bottom: 5px; clear: both;" width="800" /><p>Imagine walking into a kitchen where you can shout out recipes and a robot instantly cooks up a meal. You ask for pasta, and within minutes you have a steaming plate in front of you.  The speed and convenience are impressive, but if you never stop to check what ingredients went into the dish, you might be eating something unsafe. That is what vibe coding feels like. Instead of carefully writing lines of code, developers describe what they want in plain English and let AI assistants generate it. Tools like Copilot, ChatGPT, VSCode, and other AI-powered code helpers have made [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/">Passing the Security “Vibe” Check</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','LOW',5.0,NULL,'2025-09-10 14:01:38.536626',NULL,'2025-09-10 18:01:38.567172','2025-09-10 18:01:38.567181','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','db0ff7f6b8834d2a9fd71c14d4df1a9a','2025-09-10 18:01:38','2025-09-10 18:01:38');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_COMMUNITY_FEEDS-3541',NULL,'New OpenSecurityTraining2 class: "Bluetooth 2222: Bluetooth reconnaissance with Blue2thprinting" (~8 hours)','<!-- SC_OFF --><div class="md"><p>This class by Xeno Kovah (founder of OST2) teaches about the 30+ types of Bluetooth data that the <a href="https://github.com/darkmentorllc/blue2thprinting/">Blue2thprinting</a> software can collect and surface for when you''re trying to determine what a device is, and whether it has any known vulnerabilities. New in v2.0+ is the BTIDALPOOL crowd-sourcing server for researchers to push &amp; pull data about devices they''ve discovered.</p> <p>Like all current #OST2 classes, the core content is made fully public, and you only need to register if you want to post to the discussion board or track your class progress. Based on beta testing this class takes an median of 8 hours to complete (and an average of 9 hours, with a min of 4h30m and max of 15h22m.)</p> <p>The new Bluetooth learning path showing this class''s relationship to others under development is available here: <a href="https://ost2.fyi/Bluetooth.html">https://ost2.fyi/Bluetooth.html</a></p> </div><!-- SC_ON --> &#32; submitted by &#32; <a href="https://www.reddit.com/user/OpenSecurityTraining"> /u/OpenSecurityTraining </a> <br /> <span><a href="https://ost2.fyi/BT2222">[link]</a></span> &#32; <span><a href="https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/">[comments]</a></span>','LOW',5.0,NULL,'2025-09-10 14:01:46.032804',NULL,'2025-09-10 18:01:46.036542','2025-09-10 18:01:46.036547','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://www.reddit.com/r/netsec/comments/1natzsl/new_opensecuritytraining2_class_bluetooth_2222/"]','rss_security_community_feeds',0.8,0,NULL,0,'[]',NULL,'[]','0d54c2d3ff5e408f8687dd7a46b808e0','2025-09-10 18:01:46','2025-09-10 18:01:46');
INSERT INTO "vulnerability" VALUES('RSS-BLEEPING_COMPUTER-1123',NULL,'Pixel 10 fights AI fakes with new Android photo verification tech','Google is integrating C2PA Content Credentials into the Pixel 10 camera and Google Photos, to help users distinguish between authentic, unaltered images and those generated or edited with artificial intelligence technology. [...]','LOW',5.0,NULL,'2025-09-10 14:02:03.377828',NULL,'2025-09-10 18:02:03.389735','2025-09-10 18:02:03.389739','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://www.bleepingcomputer.com/news/security/pixel-10-fights-ai-fakes-with-new-android-photo-verification-tech/"]','rss_bleeping_computer',0.8,0,NULL,0,'[]',NULL,'[]','c90ab6c5d70a4fd1b723fb2f596f1d44','2025-09-10 18:02:03','2025-09-10 18:02:03');
INSERT INTO "vulnerability" VALUES('RSS-BLEEPING_COMPUTER-8706',NULL,'Cursor AI editor lets repos “autorun” malicious code on devices','A weakness in the Cursor code editor exposes developers to the risk of automatically executing tasks in a malicious repository as soon as it''s opened. [...]','LOW',5.0,NULL,'2025-09-10 14:02:03.378192',NULL,'2025-09-10 18:02:03.394901','2025-09-10 18:02:03.394902','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://www.bleepingcomputer.com/news/security/cursor-ai-editor-lets-repos-autorun-malicious-code-on-devices/"]','rss_bleeping_computer',0.8,0,NULL,0,'[]',NULL,'[]','1de49dee777a4ccd866b1761f951d71f','2025-09-10 18:02:03','2025-09-10 18:02:03');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-7860',NULL,'SoK: Security and Privacy of AI Agents for Blockchain','arXiv:2509.07131v1 Announce Type: new 
Abstract: Blockchain and smart contracts have garnered significant interest in recent years as the foundation of a decentralized, trustless digital ecosystem, thereby eliminating the need for traditional centralized authorities. Despite their central role in powering Web3, their complexity still presents significant barriers for non-expert users. To bridge this gap, Artificial Intelligence (AI)-based agents have emerged as valuable tools for interacting with blockchain environments, supporting a range of tasks, from analyzing on-chain data and optimizing transaction strategies to detecting vulnerabilities within smart contracts. While interest in applying AI to blockchain is growing, the literature still lacks a comprehensive survey that focuses specifically on the intersection with AI agents. Most of the related work only provides general considerations, without focusing on any specific domain. This paper addresses this gap by presenting the first Systematization of Knowledge dedicated to AI-driven systems for blockchain, with a special focus on their security and privacy dimensions, shedding light on their applications, limitations, and future research directions.','LOW',5.0,NULL,'2025-09-10 14:02:42.631081',NULL,'2025-09-10 18:02:42.635650','2025-09-10 18:02:42.635653','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.07131"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','580a6b0f96e84eeeb8f09873f0f1540d','2025-09-10 18:02:42','2025-09-10 18:02:42');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-0872',NULL,'All You Need Is A Fuzzing Brain: An LLM-Powered System for Automated Vulnerability Detection and Patching','arXiv:2509.07225v1 Announce Type: new 
Abstract: Our team, All You Need Is A Fuzzing Brain, was one of seven finalists in DARPA''s Artificial Intelligence Cyber Challenge (AIxCC), placing fourth in the final round. During the competition, we developed a Cyber Reasoning System (CRS) that autonomously discovered 28 security vulnerabilities - including six previously unknown zero-days - in real-world open-source C and Java projects, and successfully patched 14 of them. The complete CRS is open source at https://github.com/o2lab/afc-crs-all-you-need-is-a-fuzzing-brain. This paper provides a detailed technical description of our CRS, with an emphasis on its LLM-powered components and strategies. Building on AIxCC, we further introduce a public leaderboard for benchmarking state-of-the-art LLMs on vulnerability detection and patching tasks, derived from the AIxCC dataset. The leaderboard is available at https://o2lab.github.io/FuzzingBrain-Leaderboard/.','CRITICAL',5.0,NULL,'2025-09-10 14:02:42.631293',NULL,'2025-09-10 18:02:42.639179','2025-09-10 18:02:42.639180','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.07225"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','353a8f6545c046a0be71fae46be2fe61','2025-09-10 18:02:42','2025-09-10 18:02:42');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-4489',NULL,'Paladin: Defending LLM-enabled Phishing Emails with a New Trigger-Tag Paradigm','arXiv:2509.07287v1 Announce Type: new 
Abstract: With the rapid development of large language models, the potential threat of their malicious use, particularly in generating phishing content, is becoming increasingly prevalent. Leveraging the capabilities of LLMs, malicious users can synthesize phishing emails that are free from spelling mistakes and other easily detectable features. Furthermore, such models can generate topic-specific phishing messages, tailoring content to the target domain and increasing the likelihood of success.
  Detecting such content remains a significant challenge, as LLM-generated phishing emails often lack clear or distinguishable linguistic features. As a result, most existing semantic-level detection approaches struggle to identify them reliably. While certain LLM-based detection methods have shown promise, they suffer from high computational costs and are constrained by the performance of the underlying language model, making them impractical for large-scale deployment.
  In this work, we aim to address this issue. We propose Paladin, which embeds trigger-tag associations into vanilla LLM using various insertion strategies, creating them into instrumented LLMs. When an instrumented LLM generates content related to phishing, it will automatically include detectable tags, enabling easier identification. Based on the design on implicit and explicit triggers and tags, we consider four distinct scenarios in our work. We evaluate our method from three key perspectives: stealthiness, effectiveness, and robustness, and compare it with existing baseline methods. Experimental results show that our method outperforms the baselines, achieving over 90% detection accuracy across all scenarios.','HIGH',5.0,NULL,'2025-09-10 14:02:42.631405',NULL,'2025-09-10 18:02:42.641900','2025-09-10 18:02:42.641902','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.07287"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','4c39f9a980f84898854ead5f0cb05623','2025-09-10 18:02:42','2025-09-10 18:02:42');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-2717',NULL,'Enhanced cast-128 with adaptive s-box optimization via neural networks for image protection','arXiv:2509.07606v1 Announce Type: new 
Abstract: An improved CAST-128 encryption algorithm, which is done by implementing chaos-based adaptive S-box generation using Logistic sine Map (LSM), has been provided in this paper because of the increasing requirements of efficient and smart image encryption mechanisms. The study aims to address the drawbacks of static S-box models commonly used in traditional cryptographic systems, which are susceptible to linear and differential attacks. In the proposed scheme, the dynamic, non-linear, invertible, and highly cryptographic strength S-boxes are generated through a hybrid chaotic system that may have high non-linearity, strong and rigorous avalanche characteristics, and low differential uniformity. The process here is that the LSM is used to produce S-boxes having key-dependent parameters that are stuffed into the CAST-128 structure to encrypt the image in a block-wise manner. The performance of the encryption is assessed utilizing a set of standard grayscale images. The metrics that are used to evaluate the security are entropy, NPCR, UACI, PSNR, and histogram analysis. Outcomes indicate that randomness, resistance to statistical attacks, and country of encryption are significantly improved compared to the original CAST-128. The study is theoretically and practically relevant since it presents a lightweight S-box generation approach driven by chaos, which can increase the level of robustness of the image encryptions without enlisting machine learning. The system may be applied to secure communications, surveillance systems, and medical image protection on a real-time basis.','HIGH',5.0,NULL,'2025-09-10 14:02:42.631951',NULL,'2025-09-10 18:02:42.644021','2025-09-10 18:02:42.644022','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.07606"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','8575579b179a494d8a8d4565a61d2e00','2025-09-10 18:02:42','2025-09-10 18:02:42');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-1978',NULL,'Passing the Security “Vibe” Check','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="400" src="https://blog.checkpoint.com/wp-content/uploads/2025/06/blog-image-2.jpg" style="display: block; margin-bottom: 5px; clear: both;" width="800" /><p>Imagine walking into a kitchen where you can shout out recipes and a robot instantly cooks up a meal. You ask for pasta, and within minutes you have a steaming plate in front of you.  The speed and convenience are impressive, but if you never stop to check what ingredients went into the dish, you might be eating something unsafe. That is what vibe coding feels like. Instead of carefully writing lines of code, developers describe what they want in plain English and let AI assistants generate it. Tools like Copilot, ChatGPT, VSCode, and other AI-powered code helpers have made [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/">Passing the Security “Vibe” Check</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','LOW',5.0,NULL,'2025-09-10 14:08:40.048536',NULL,'2025-09-10 18:08:40.060383','2025-09-10 18:08:40.060389','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','8d065dfbbe4b4cc79fd9cbb5325ecef5','2025-09-10 18:08:40','2025-09-10 18:08:40');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-6187',NULL,'Hexstrike-AI: When LLMs Meet Zero-Day Exploitation','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="800" src="https://blog.checkpoint.com/wp-content/uploads/2025/09/image-1.png" style="display: block; margin-bottom: 5px; clear: both;" width="1600" /><p>Key Findings: Newly released framework called Hexstrike-AI provides threat actors with an orchestration “brain” that can direct more than 150 specialized AI agents to autonomously scan, exploit, and persist inside targets. Within hours of its release, dark web chatter shows threat actors attempting to use HexStrike-AI to go after a recent zero day CVEs, with attackers dropping webshells for unauthenticated remote code execution. These vulnerabilities are complex and require advanced skills to exploit. With Hextrike-AI, threat actors claim to reduce the exploitation time from days to under 10 minutes. From Concept to Reality A recent executive insight blog examined the [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/hexstrike-ai-when-llms-meet-zero-day-exploitation/">Hexstrike-AI: When LLMs Meet Zero-Day Exploitation</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','CRITICAL',5.0,NULL,'2025-09-10 14:08:40.048900',NULL,'2025-09-10 18:08:40.070042','2025-09-10 18:08:40.070044','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/hexstrike-ai-when-llms-meet-zero-day-exploitation/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','77deeb6fbf954d3ea9c39e974334965e','2025-09-10 18:08:40','2025-09-10 18:08:40');
INSERT INTO "vulnerability" VALUES('RSS-BLEEPING_COMPUTER-0958',NULL,'Cursor AI editor lets repos “autorun” malicious code on devices','A weakness in the Cursor code editor exposes developers to the risk of automatically executing tasks in a malicious repository as soon as it''s opened. [...]','LOW',5.0,NULL,'2025-09-10 14:09:05.128317',NULL,'2025-09-10 18:09:05.141685','2025-09-10 18:09:05.141699','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://www.bleepingcomputer.com/news/security/cursor-ai-editor-lets-repos-autorun-malicious-code-on-devices/"]','rss_bleeping_computer',0.8,0,NULL,0,'[]',NULL,'[]','ab5bcbf7779f40acb58123d2ff4571f2','2025-09-10 18:09:05','2025-09-10 18:09:05');
INSERT INTO "vulnerability" VALUES('ADMIN-150BD549','CVE-2025-CURSOR-001','Critical Cursor IDE Security Vulnerability (CVE-2025-CURSOR-001)','A critical security flaw in Cursor IDE allows remote code execution through malicious AI completions. This affects the primary AI development environment.

AI Tools Potentially Affected: Cursor

Severity Assessment: This vulnerability poses a critical risk to AI development environments.','CRITICAL',10.0,NULL,'2025-09-10 18:12:16.356656',NULL,'2025-09-10 18:12:16.356657','2025-09-10 18:12:16.356658','["rce"]','A critical security flaw in Cursor IDE allows remote code execution through malicious AI completions. This affects the primary AI development environment.',NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'[]','["https://example.com/cursor-critical"]','ADMIN_SUBMISSION',1.0,1,NULL,1,'[]',NULL,'[]','227a5086bfc8421e9ea34c2ffef77817','2025-09-10 18:12:16.356657','2025-09-10 18:12:16.356657');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-7086',NULL,'Passing the Security “Vibe” Check','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="400" src="https://blog.checkpoint.com/wp-content/uploads/2025/06/blog-image-2.jpg" style="display: block; margin-bottom: 5px; clear: both;" width="800" /><p>Imagine walking into a kitchen where you can shout out recipes and a robot instantly cooks up a meal. You ask for pasta, and within minutes you have a steaming plate in front of you.  The speed and convenience are impressive, but if you never stop to check what ingredients went into the dish, you might be eating something unsafe. That is what vibe coding feels like. Instead of carefully writing lines of code, developers describe what they want in plain English and let AI assistants generate it. Tools like Copilot, ChatGPT, VSCode, and other AI-powered code helpers have made [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/">Passing the Security “Vibe” Check</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','LOW',5.0,NULL,'2025-09-10 14:13:32.384016',NULL,'2025-09-10 18:13:32.391875','2025-09-10 18:13:32.391882','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','7586006828f34ef1ae8cc4a9a7b1bb3d','2025-09-10 18:13:32','2025-09-10 18:13:32');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-2891',NULL,'Hexstrike-AI: When LLMs Meet Zero-Day Exploitation','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="800" src="https://blog.checkpoint.com/wp-content/uploads/2025/09/image-1.png" style="display: block; margin-bottom: 5px; clear: both;" width="1600" /><p>Key Findings: Newly released framework called Hexstrike-AI provides threat actors with an orchestration “brain” that can direct more than 150 specialized AI agents to autonomously scan, exploit, and persist inside targets. Within hours of its release, dark web chatter shows threat actors attempting to use HexStrike-AI to go after a recent zero day CVEs, with attackers dropping webshells for unauthenticated remote code execution. These vulnerabilities are complex and require advanced skills to exploit. With Hextrike-AI, threat actors claim to reduce the exploitation time from days to under 10 minutes. From Concept to Reality A recent executive insight blog examined the [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/hexstrike-ai-when-llms-meet-zero-day-exploitation/">Hexstrike-AI: When LLMs Meet Zero-Day Exploitation</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','CRITICAL',5.0,NULL,'2025-09-10 14:13:32.384513',NULL,'2025-09-10 18:13:32.397825','2025-09-10 18:13:32.397827','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/hexstrike-ai-when-llms-meet-zero-day-exploitation/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','b83b0097ad5d450e950be42ceeb9f7ac','2025-09-10 18:13:32','2025-09-10 18:13:32');
INSERT INTO "vulnerability" VALUES('RSS-BLEEPING_COMPUTER-8145',NULL,'Cursor AI editor lets repos “autorun” malicious code on devices','A weakness in the Cursor code editor exposes developers to the risk of automatically executing tasks in a malicious repository as soon as it''s opened. [...]','LOW',5.0,NULL,'2025-09-10 14:13:57.541015',NULL,'2025-09-10 18:13:57.550655','2025-09-10 18:13:57.550663','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://www.bleepingcomputer.com/news/security/cursor-ai-editor-lets-repos-autorun-malicious-code-on-devices/"]','rss_bleeping_computer',0.8,0,NULL,0,'[]',NULL,'[]','820c2e4846ad4277b70796690389c36c','2025-09-10 18:13:57','2025-09-10 18:13:57');
INSERT INTO "vulnerability" VALUES('CVE-2025-53002','CVE-2025-53002','CVE CVE-2025-53002','LLaMA-Factory is a tuning library for large language models. A remote code execution vulnerability was discovered in LLaMA-Factory versions up to and including 0.9.3 during the LLaMA-Factory training process. This vulnerability arises because the `vhead_file` is loaded without proper safeguards, allowing malicious attackers to execute arbitrary malicious code on the host system simply by passing a malicious `Checkpoint path` parameter through the `WebUI` interface. The attack is stealthy, as the victim remains unaware of the exploitation. The root cause is that the `vhead_file` argument is loaded without the secure parameter `weights_only=True`. Version 0.9.4 contains a fix for the issue.','HIGH',8.3,'CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:H','2025-09-10 14:20:00.867439',NULL,'2025-09-10 18:20:16.905611','2025-09-10 18:20:16.905614','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://drive.google.com/file/d/1AddKm2mllsXfuvL4Tvbn_WJdjEOYXx4y/view?usp=sharing", "https://github.com/hiyouga/LLaMA-Factory/commit/bb7bf51554d4ba8432333c35a5e3b52705955ede", "https://github.com/hiyouga/LLaMA-Factory/security/advisories/GHSA-xj56-p8mm-qmxj"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','6193454af0cc4809b40f0518d05b7478','2025-09-10 18:20:16','2025-09-10 18:20:16');
INSERT INTO "vulnerability" VALUES('CVE-2025-58372','CVE-2025-58372','CVE CVE-2025-58372','Roo Code is an AI-powered autonomous coding agent that lives in users'' editors. Versions 3.25.23 and below contain a vulnerability where certain VS Code workspace configuration files (.code-workspace) are not protected in the same way as the .vscode folder. If the agent was configured to auto-approve file writes, an attacker able to influence prompts (for example via prompt injection) could cause malicious workspace settings or tasks to be written. These tasks could then be executed automatically when the workspace is reopened, resulting in arbitrary code execution. This issue is fixed in version 3.26.0.','HIGH',8.1,'CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H','2025-09-10 14:20:12.752415',NULL,'2025-09-10 18:20:16.915565','2025-09-10 18:20:16.915567','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://github.com/RooCodeInc/Roo-Code/commit/296edfc829a7c6efc8b5dbe09aa766a9aed79598", "https://github.com/RooCodeInc/Roo-Code/releases/tag/v3.26.0", "https://github.com/RooCodeInc/Roo-Code/security/advisories/GHSA-4pqh-4ggm-jfmm"]','nvd',0.8,0,NULL,0,'[]',NULL,'[]','53225516c829437889be6ca16fd39b4e','2025-09-10 18:20:16','2025-09-10 18:20:16');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-8263',NULL,'Passing the Security “Vibe” Check','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="400" src="https://blog.checkpoint.com/wp-content/uploads/2025/06/blog-image-2.jpg" style="display: block; margin-bottom: 5px; clear: both;" width="800" /><p>Imagine walking into a kitchen where you can shout out recipes and a robot instantly cooks up a meal. You ask for pasta, and within minutes you have a steaming plate in front of you.  The speed and convenience are impressive, but if you never stop to check what ingredients went into the dish, you might be eating something unsafe. That is what vibe coding feels like. Instead of carefully writing lines of code, developers describe what they want in plain English and let AI assistants generate it. Tools like Copilot, ChatGPT, VSCode, and other AI-powered code helpers have made [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/">Passing the Security “Vibe” Check</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','LOW',5.0,NULL,'2025-09-10 14:21:08.595421',NULL,'2025-09-10 18:21:08.601954','2025-09-10 18:21:08.601960','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','5dab48bbdaa54f3aafc1e173c58ab688','2025-09-10 18:21:08','2025-09-10 18:21:08');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-3340',NULL,'Hexstrike-AI: When LLMs Meet Zero-Day Exploitation','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="800" src="https://blog.checkpoint.com/wp-content/uploads/2025/09/image-1.png" style="display: block; margin-bottom: 5px; clear: both;" width="1600" /><p>Key Findings: Newly released framework called Hexstrike-AI provides threat actors with an orchestration “brain” that can direct more than 150 specialized AI agents to autonomously scan, exploit, and persist inside targets. Within hours of its release, dark web chatter shows threat actors attempting to use HexStrike-AI to go after a recent zero day CVEs, with attackers dropping webshells for unauthenticated remote code execution. These vulnerabilities are complex and require advanced skills to exploit. With Hextrike-AI, threat actors claim to reduce the exploitation time from days to under 10 minutes. From Concept to Reality A recent executive insight blog examined the [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/hexstrike-ai-when-llms-meet-zero-day-exploitation/">Hexstrike-AI: When LLMs Meet Zero-Day Exploitation</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','CRITICAL',5.0,NULL,'2025-09-10 14:21:08.595753',NULL,'2025-09-10 18:21:08.605554','2025-09-10 18:21:08.605555','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/hexstrike-ai-when-llms-meet-zero-day-exploitation/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','7985f0a0570149a2a08aea8cd0eb0460','2025-09-10 18:21:08','2025-09-10 18:21:08');
INSERT INTO "vulnerability" VALUES('RSS-BLEEPING_COMPUTER-5876',NULL,'Cursor AI editor lets repos “autorun” malicious code on devices','A weakness in the Cursor code editor exposes developers to the risk of automatically executing tasks in a malicious repository as soon as it''s opened. [...]','LOW',5.0,NULL,'2025-09-10 14:21:33.735430',NULL,'2025-09-10 18:21:33.741080','2025-09-10 18:21:33.741084','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://www.bleepingcomputer.com/news/security/cursor-ai-editor-lets-repos-autorun-malicious-code-on-devices/"]','rss_bleeping_computer',0.8,0,NULL,0,'[]',NULL,'[]','34b7ff5e37094602a8da605dd24e076a','2025-09-10 18:21:33','2025-09-10 18:21:33');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-7211',NULL,'Architecting Resilient LLM Agents: A Guide to Secure Plan-then-Execute Implementations','arXiv:2509.08646v1 Announce Type: new 
Abstract: As Large Language Model (LLM) agents become increasingly capable of automating complex, multi-step tasks, the need for robust, secure, and predictable architectural patterns is paramount. This paper provides a comprehensive guide to the ``Plan-then-Execute'''' (P-t-E) pattern, an agentic design that separates strategic planning from tactical execution. We explore the foundational principles of P-t-E, detailing its core components - the Planner and the Executor - and its architectural advantages in predictability, cost-efficiency, and reasoning quality over reactive patterns like ReAct (Reason + Act). A central focus is placed on the security implications of this design, particularly its inherent resilience to indirect prompt injection attacks by establishing control-flow integrity. We argue that while P-t-E provides a strong foundation, a defense-in-depth strategy is necessary, and we detail essential complementary controls such as the Principle of Least Privilege, task-scoped tool access, and sandboxed code execution. To make these principles actionable, this guide provides detailed implementation blueprints and working code references for three leading agentic frameworks: LangChain (via LangGraph), CrewAI, and AutoGen. Each framework''s approach to implementing the P-t-E pattern is analyzed, highlighting unique features like LangGraph''s stateful graphs for re-planning, CrewAI''s declarative tool scoping for security, and AutoGen''s built-in Docker sandboxing. Finally, we discuss advanced patterns, including dynamic re-planning loops, parallel execution with Directed Acyclic Graphs (DAGs), and the critical role of Human-in-the-Loop (HITL) verification, to offer a complete strategic blueprint for architects, developers, and security engineers aiming to build production-grade, resilient, and trustworthy LLM agents.','CRITICAL',5.0,NULL,'2025-09-11 11:32:23.807045',NULL,'2025-09-11 15:32:23.828204','2025-09-11 15:32:23.828358','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.08646"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','b37a00c7cecc467f9a3f72ce5be73426','2025-09-11 15:32:23','2025-09-11 15:32:23');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-6568',NULL,'What You Code Is What We Prove: Translating BLE App Logic into Formal Models with LLMs for Vulnerability Detection','arXiv:2509.09291v1 Announce Type: new 
Abstract: The application layer of Bluetooth Low Energy (BLE) is a growing source of security vulnerabilities, as developers often neglect to implement critical protections such as encryption, authentication, and freshness. While formal verification offers a principled way to check these properties, the manual effort of constructing formal models makes it impractical for large-scale analysis. This paper introduces a key insight: BLE application security analysis can be reframed as a semantic translation problem, i.e., from real-world code to formal models. We leverage large language models (LLMs) not to directly detect vulnerabilities, but to serve as translators that convert BLE-specific code into process models verifiable by tools like ProVerif. We implement this idea in VerifiaBLE, a system that combines static analysis, prompt-guided LLM translation, and symbolic verification to check three core security features: encryption, randomness, and authentication. Applied to 1,050 Android BLE apps, VerifiaBLE uncovers systemic weaknesses: only 10.2\% of apps implement all three protections, while 53.9\% omit them entirely. Our work demonstrates that using LLMs as structured translators can lower the barrier to formal methods, unlocking scalable verification across security-critical domains.','CRITICAL',5.0,NULL,'2025-09-12 09:56:22.050275',NULL,'2025-09-12 13:56:22.100246','2025-09-12 13:56:22.100254','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.09291"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','3d02853a9cc54078b93cb13c295116bd','2025-09-12 13:56:22','2025-09-12 13:56:22');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-0089',NULL,'Bridging the Gap in Phishing Detection: A Comprehensive Phishing Dataset Collector','arXiv:2509.09592v1 Announce Type: new 
Abstract: To combat phishing attacks -- aimed at luring web users to divulge their sensitive information -- various phishing detection approaches have been proposed. As attackers focus on devising new tactics to bypass existing detection solutions, researchers have adapted by integrating machine learning and deep learning into phishing detection. Phishing dataset collection is vital to developing effective phishing detection approaches, which highly depend on the diversity of the gathered datasets. The lack of diversity in the dataset results in a biased model. Since phishing websites are often short-lived, collecting them is also a challenge. Consequently, very few phishing webpage dataset repositories exist to date. No single repository comprehensively consolidates all phishing elements corresponding to a phishing webpage, namely, URL, webpage source code, screenshot, and related webpage resources. This paper introduces a resource collection tool designed to gather various resources associated with a URL, such as CSS, Javascript, favicons, webpage images, and screenshots. Our tool leverages PhishTank as the primary source for obtaining active phishing URLs. Our tool fetches several additional webpage resources compared to PyWebCopy Python library, which provides webpage content for a given URL. Additionally, we share a sample dataset generated using our tool comprising 4,056 legitimate and 5,666 phishing URLs along with their associated resources. We also remark on the top correlated phishing features with their associated class label found in our dataset. Our tool offers a comprehensive resource set that can aid researchers in developing effective phishing detection approaches.','CRITICAL',5.0,NULL,'2025-09-12 09:56:22.051236',NULL,'2025-09-12 13:56:22.109716','2025-09-12 13:56:22.109717','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.09592"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','d751b472207e4bcd8f4fb14641286cdd','2025-09-12 13:56:22','2025-09-12 13:56:22');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-7160',NULL,'Passing the Security “Vibe” Check','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="400" src="https://blog.checkpoint.com/wp-content/uploads/2025/06/blog-image-2.jpg" style="display: block; margin-bottom: 5px; clear: both;" width="800" /><p>Imagine walking into a kitchen where you can shout out recipes and a robot instantly cooks up a meal. You ask for pasta, and within minutes you have a steaming plate in front of you.  The speed and convenience are impressive, but if you never stop to check what ingredients went into the dish, you might be eating something unsafe. That is what vibe coding feels like. Instead of carefully writing lines of code, developers describe what they want in plain English and let AI assistants generate it. Tools like Copilot, ChatGPT, VSCode, and other AI-powered code helpers have made [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/">Passing the Security “Vibe” Check</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','LOW',5.0,NULL,'2025-09-12 10:02:49.320428',NULL,'2025-09-12 14:02:49.399477','2025-09-12 14:02:49.399487','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','4e0ce27ff4b14570b295e09ecbb5740f','2025-09-12 14:02:49','2025-09-12 14:02:49');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-6612',NULL,'What You Code Is What We Prove: Translating BLE App Logic into Formal Models with LLMs for Vulnerability Detection','arXiv:2509.09291v1 Announce Type: new 
Abstract: The application layer of Bluetooth Low Energy (BLE) is a growing source of security vulnerabilities, as developers often neglect to implement critical protections such as encryption, authentication, and freshness. While formal verification offers a principled way to check these properties, the manual effort of constructing formal models makes it impractical for large-scale analysis. This paper introduces a key insight: BLE application security analysis can be reframed as a semantic translation problem, i.e., from real-world code to formal models. We leverage large language models (LLMs) not to directly detect vulnerabilities, but to serve as translators that convert BLE-specific code into process models verifiable by tools like ProVerif. We implement this idea in VerifiaBLE, a system that combines static analysis, prompt-guided LLM translation, and symbolic verification to check three core security features: encryption, randomness, and authentication. Applied to 1,050 Android BLE apps, VerifiaBLE uncovers systemic weaknesses: only 10.2\% of apps implement all three protections, while 53.9\% omit them entirely. Our work demonstrates that using LLMs as structured translators can lower the barrier to formal methods, unlocking scalable verification across security-critical domains.','CRITICAL',5.0,NULL,'2025-09-12 10:03:54.347662',NULL,'2025-09-12 14:03:54.362502','2025-09-12 14:03:54.362508','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.09291"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','32995296168d45598ce75bcef4d97c8b','2025-09-12 14:03:54','2025-09-12 14:03:54');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-0610',NULL,'Bridging the Gap in Phishing Detection: A Comprehensive Phishing Dataset Collector','arXiv:2509.09592v1 Announce Type: new 
Abstract: To combat phishing attacks -- aimed at luring web users to divulge their sensitive information -- various phishing detection approaches have been proposed. As attackers focus on devising new tactics to bypass existing detection solutions, researchers have adapted by integrating machine learning and deep learning into phishing detection. Phishing dataset collection is vital to developing effective phishing detection approaches, which highly depend on the diversity of the gathered datasets. The lack of diversity in the dataset results in a biased model. Since phishing websites are often short-lived, collecting them is also a challenge. Consequently, very few phishing webpage dataset repositories exist to date. No single repository comprehensively consolidates all phishing elements corresponding to a phishing webpage, namely, URL, webpage source code, screenshot, and related webpage resources. This paper introduces a resource collection tool designed to gather various resources associated with a URL, such as CSS, Javascript, favicons, webpage images, and screenshots. Our tool leverages PhishTank as the primary source for obtaining active phishing URLs. Our tool fetches several additional webpage resources compared to PyWebCopy Python library, which provides webpage content for a given URL. Additionally, we share a sample dataset generated using our tool comprising 4,056 legitimate and 5,666 phishing URLs along with their associated resources. We also remark on the top correlated phishing features with their associated class label found in our dataset. Our tool offers a comprehensive resource set that can aid researchers in developing effective phishing detection approaches.','CRITICAL',5.0,NULL,'2025-09-12 10:03:54.348433',NULL,'2025-09-12 14:03:54.369209','2025-09-12 14:03:54.369210','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.09592"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','3d20d8643b694862aeff1bdd4749f023','2025-09-12 14:03:54','2025-09-12 14:03:54');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-6718',NULL,'Passing the Security “Vibe” Check','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="400" src="https://blog.checkpoint.com/wp-content/uploads/2025/06/blog-image-2.jpg" style="display: block; margin-bottom: 5px; clear: both;" width="800" /><p>Imagine walking into a kitchen where you can shout out recipes and a robot instantly cooks up a meal. You ask for pasta, and within minutes you have a steaming plate in front of you.  The speed and convenience are impressive, but if you never stop to check what ingredients went into the dish, you might be eating something unsafe. That is what vibe coding feels like. Instead of carefully writing lines of code, developers describe what they want in plain English and let AI assistants generate it. Tools like Copilot, ChatGPT, VSCode, and other AI-powered code helpers have made [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/">Passing the Security “Vibe” Check</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','LOW',5.0,NULL,'2025-09-12 11:02:17.530586',NULL,'2025-09-12 15:02:17.571174','2025-09-12 15:02:17.571177','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','9b66bb97-5c56-4169-8035-54f72d34ffae','2025-09-12 15:02:17','2025-09-12 15:02:17');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-3538',NULL,'What You Code Is What We Prove: Translating BLE App Logic into Formal Models with LLMs for Vulnerability Detection','arXiv:2509.09291v1 Announce Type: new 
Abstract: The application layer of Bluetooth Low Energy (BLE) is a growing source of security vulnerabilities, as developers often neglect to implement critical protections such as encryption, authentication, and freshness. While formal verification offers a principled way to check these properties, the manual effort of constructing formal models makes it impractical for large-scale analysis. This paper introduces a key insight: BLE application security analysis can be reframed as a semantic translation problem, i.e., from real-world code to formal models. We leverage large language models (LLMs) not to directly detect vulnerabilities, but to serve as translators that convert BLE-specific code into process models verifiable by tools like ProVerif. We implement this idea in VerifiaBLE, a system that combines static analysis, prompt-guided LLM translation, and symbolic verification to check three core security features: encryption, randomness, and authentication. Applied to 1,050 Android BLE apps, VerifiaBLE uncovers systemic weaknesses: only 10.2\% of apps implement all three protections, while 53.9\% omit them entirely. Our work demonstrates that using LLMs as structured translators can lower the barrier to formal methods, unlocking scalable verification across security-critical domains.','CRITICAL',5.0,NULL,'2025-09-12 11:03:23.336867',NULL,'2025-09-12 15:03:23.344099','2025-09-12 15:03:23.344105','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.09291"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','b2578ada-d913-4fe1-8e74-5549106b124c','2025-09-12 15:03:23','2025-09-12 15:03:23');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-4723',NULL,'Bridging the Gap in Phishing Detection: A Comprehensive Phishing Dataset Collector','arXiv:2509.09592v1 Announce Type: new 
Abstract: To combat phishing attacks -- aimed at luring web users to divulge their sensitive information -- various phishing detection approaches have been proposed. As attackers focus on devising new tactics to bypass existing detection solutions, researchers have adapted by integrating machine learning and deep learning into phishing detection. Phishing dataset collection is vital to developing effective phishing detection approaches, which highly depend on the diversity of the gathered datasets. The lack of diversity in the dataset results in a biased model. Since phishing websites are often short-lived, collecting them is also a challenge. Consequently, very few phishing webpage dataset repositories exist to date. No single repository comprehensively consolidates all phishing elements corresponding to a phishing webpage, namely, URL, webpage source code, screenshot, and related webpage resources. This paper introduces a resource collection tool designed to gather various resources associated with a URL, such as CSS, Javascript, favicons, webpage images, and screenshots. Our tool leverages PhishTank as the primary source for obtaining active phishing URLs. Our tool fetches several additional webpage resources compared to PyWebCopy Python library, which provides webpage content for a given URL. Additionally, we share a sample dataset generated using our tool comprising 4,056 legitimate and 5,666 phishing URLs along with their associated resources. We also remark on the top correlated phishing features with their associated class label found in our dataset. Our tool offers a comprehensive resource set that can aid researchers in developing effective phishing detection approaches.','CRITICAL',5.0,NULL,'2025-09-12 11:03:23.337842',NULL,'2025-09-12 15:03:23.349865','2025-09-12 15:03:23.349866','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.09592"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','8a650725-1bd0-46c4-9d09-d2f39991f9a7','2025-09-12 15:03:23','2025-09-12 15:03:23');
INSERT INTO "vulnerability" VALUES('RSS-SECURITY_RESEARCH_BLOGS-2941',NULL,'Passing the Security “Vibe” Check','<img alt="" class="webfeedsFeaturedVisual wp-post-image" height="400" src="https://blog.checkpoint.com/wp-content/uploads/2025/06/blog-image-2.jpg" style="display: block; margin-bottom: 5px; clear: both;" width="800" /><p>Imagine walking into a kitchen where you can shout out recipes and a robot instantly cooks up a meal. You ask for pasta, and within minutes you have a steaming plate in front of you.  The speed and convenience are impressive, but if you never stop to check what ingredients went into the dish, you might be eating something unsafe. That is what vibe coding feels like. Instead of carefully writing lines of code, developers describe what they want in plain English and let AI assistants generate it. Tools like Copilot, ChatGPT, VSCode, and other AI-powered code helpers have made [&#8230;]</p>
<p>The post <a href="https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/">Passing the Security “Vibe” Check</a> appeared first on <a href="https://blog.checkpoint.com">Check Point Blog</a>.</p>','LOW',5.0,NULL,'2025-09-12 11:35:25.944183',NULL,'2025-09-12 15:35:25.984110','2025-09-12 15:35:25.984117','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://blog.checkpoint.com/executive-insights/passing-the-security-vibe-check/"]','rss_security_research_blogs',0.8,0,NULL,0,'[]',NULL,'[]','c4aecc78-0982-4a15-81eb-e94f8d37f141','2025-09-12 15:35:25','2025-09-12 15:35:25');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-4354',NULL,'What You Code Is What We Prove: Translating BLE App Logic into Formal Models with LLMs for Vulnerability Detection','arXiv:2509.09291v1 Announce Type: new 
Abstract: The application layer of Bluetooth Low Energy (BLE) is a growing source of security vulnerabilities, as developers often neglect to implement critical protections such as encryption, authentication, and freshness. While formal verification offers a principled way to check these properties, the manual effort of constructing formal models makes it impractical for large-scale analysis. This paper introduces a key insight: BLE application security analysis can be reframed as a semantic translation problem, i.e., from real-world code to formal models. We leverage large language models (LLMs) not to directly detect vulnerabilities, but to serve as translators that convert BLE-specific code into process models verifiable by tools like ProVerif. We implement this idea in VerifiaBLE, a system that combines static analysis, prompt-guided LLM translation, and symbolic verification to check three core security features: encryption, randomness, and authentication. Applied to 1,050 Android BLE apps, VerifiaBLE uncovers systemic weaknesses: only 10.2\% of apps implement all three protections, while 53.9\% omit them entirely. Our work demonstrates that using LLMs as structured translators can lower the barrier to formal methods, unlocking scalable verification across security-critical domains.','CRITICAL',5.0,NULL,'2025-09-12 11:36:31.814999',NULL,'2025-09-12 15:36:31.826141','2025-09-12 15:36:31.826144','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.09291"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','18b61e83-1ac1-4a8f-ab7e-f22476b30b1c','2025-09-12 15:36:31','2025-09-12 15:36:31');
INSERT INTO "vulnerability" VALUES('RSS-ARXIV_CS_SECURITY-4112',NULL,'Bridging the Gap in Phishing Detection: A Comprehensive Phishing Dataset Collector','arXiv:2509.09592v1 Announce Type: new 
Abstract: To combat phishing attacks -- aimed at luring web users to divulge their sensitive information -- various phishing detection approaches have been proposed. As attackers focus on devising new tactics to bypass existing detection solutions, researchers have adapted by integrating machine learning and deep learning into phishing detection. Phishing dataset collection is vital to developing effective phishing detection approaches, which highly depend on the diversity of the gathered datasets. The lack of diversity in the dataset results in a biased model. Since phishing websites are often short-lived, collecting them is also a challenge. Consequently, very few phishing webpage dataset repositories exist to date. No single repository comprehensively consolidates all phishing elements corresponding to a phishing webpage, namely, URL, webpage source code, screenshot, and related webpage resources. This paper introduces a resource collection tool designed to gather various resources associated with a URL, such as CSS, Javascript, favicons, webpage images, and screenshots. Our tool leverages PhishTank as the primary source for obtaining active phishing URLs. Our tool fetches several additional webpage resources compared to PyWebCopy Python library, which provides webpage content for a given URL. Additionally, we share a sample dataset generated using our tool comprising 4,056 legitimate and 5,666 phishing URLs along with their associated resources. We also remark on the top correlated phishing features with their associated class label found in our dataset. Our tool offers a comprehensive resource set that can aid researchers in developing effective phishing detection approaches.','CRITICAL',5.0,NULL,'2025-09-12 11:36:31.816069',NULL,'2025-09-12 15:36:31.830720','2025-09-12 15:36:31.830721','["injection"]',NULL,NULL,'UNPATCHED',NULL,NULL,NULL,0,0,NULL,'["automated-discovery"]','["https://arxiv.org/abs/2509.09592"]','rss_arxiv_cs_security',0.8,0,NULL,0,'[]',NULL,'[]','d7e8641d-350a-4703-8366-36bdde691d75','2025-09-12 15:36:31','2025-09-12 15:36:31');
CREATE TABLE aitool (
	name VARCHAR(100) NOT NULL, 
	display_name VARCHAR(200) NOT NULL, 
	vendor VARCHAR(100) NOT NULL, 
	description TEXT, 
	current_version VARCHAR(50), 
	supported_languages JSON, 
	platform_support JSON, 
	security_contact VARCHAR(200), 
	security_policy_url VARCHAR(500), 
	vulnerability_disclosure_url VARCHAR(500), 
	is_actively_monitored BOOLEAN, 
	monitoring_priority FLOAT, 
	last_security_check VARCHAR(100), 
	api_endpoints JSON, 
	rss_feeds JSON, 
	github_repos JSON, 
	total_vulnerabilities FLOAT, 
	critical_vulnerabilities FLOAT, 
	last_vulnerability_date VARCHAR(100), 
	id UUID NOT NULL, 
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
);
INSERT INTO "aitool" VALUES('cursor','Cursor','Cursor Inc.','AI-powered code editor with built-in pair programming features','0.8.3','["python", "javascript", "typescript", "react", "go", "rust"]','["windows", "macos", "linux"]','security@cursor.ai','https://cursor.ai/security',NULL,1,1.0,NULL,NULL,NULL,NULL,0.0,0.0,NULL,'39adefe393a640f6aab388a58a7b5a91','2025-09-09 16:21:07','2025-09-09 16:21:07');
INSERT INTO "aitool" VALUES('github_copilot','GitHub Copilot','GitHub/Microsoft','AI pair programmer that helps write code faster','1.2.6','["python", "javascript", "typescript", "go", "ruby", "java", "c++"]','["vscode", "jetbrains", "neovim", "visual_studio"]','security@github.com','https://github.com/github/copilot-docs/blob/main/SECURITY.md','https://bounty.github.com',1,1.0,NULL,NULL,NULL,NULL,0.0,0.0,NULL,'a546e64478084fbabfb40aad2239f171','2025-09-09 16:21:07','2025-09-09 16:21:07');
INSERT INTO "aitool" VALUES('amazon_codewhisperer','Amazon CodeWhisperer','Amazon Web Services','Machine learning powered code generator','2.1.0','["python", "java", "javascript", "typescript", "c#", "go"]','["vscode", "jetbrains", "aws_toolkit"]','aws-security@amazon.com','https://aws.amazon.com/security/',NULL,1,0.9,NULL,NULL,NULL,NULL,0.0,0.0,NULL,'f06da20a50944abda8b576395b61cfb6','2025-09-09 16:21:07','2025-09-09 16:21:07');
INSERT INTO "aitool" VALUES('tabnine','Tabnine','Tabnine Ltd.','AI assistant for code completion','4.15.2','["python", "javascript", "java", "typescript", "go", "php", "rust"]','["vscode", "jetbrains", "sublime", "vim", "emacs"]','security@tabnine.com','https://www.tabnine.com/security',NULL,1,0.8,NULL,NULL,NULL,NULL,0.0,0.0,NULL,'7c497c23b209482bb5add74a9e20694b','2025-09-09 16:21:07','2025-09-09 16:21:07');
INSERT INTO "aitool" VALUES('codeium','Codeium','Exafunction Inc.','Free AI-powered code completion','1.6.12','["python", "javascript", "typescript", "java", "go", "rust", "c++"]','["vscode", "jetbrains", "vim", "emacs", "chrome"]','security@codeium.com',NULL,NULL,1,0.7,NULL,NULL,NULL,NULL,0.0,0.0,NULL,'fa9485abaa1a48a99a1f469df5c9c8fe','2025-09-09 16:21:07','2025-09-09 16:21:07');
INSERT INTO "aitool" VALUES('replit_ghostwriter','Replit Ghostwriter','Replit Inc.','AI pair programmer for Replit IDE',NULL,'["python", "javascript", "java", "go", "rust", "c++", "html", "css"]','["replit"]','security@replit.com',NULL,NULL,1,0.6,NULL,NULL,NULL,NULL,0.0,0.0,NULL,'22c9cbe320884bb59f41434c9d426d25','2025-09-09 16:21:07','2025-09-09 16:21:07');
INSERT INTO "aitool" VALUES('sourcegraph_cody','Sourcegraph Cody','Sourcegraph Inc.','AI coding assistant that knows your codebase',NULL,'["python", "javascript", "typescript", "go", "java", "c++"]','["vscode", "jetbrains"]','security@sourcegraph.com','https://sourcegraph.com/security',NULL,1,0.7,NULL,NULL,NULL,NULL,0.0,0.0,NULL,'6fd771363de04be2a7119b37c35320a2','2025-09-09 16:21:07','2025-09-09 16:21:07');
INSERT INTO "aitool" VALUES('jetbrains_ai_assistant','JetBrains AI Assistant','JetBrains','AI-powered coding assistant for JetBrains IDEs',NULL,'["java", "kotlin", "python", "javascript", "go", "rust"]','["intellij", "pycharm", "webstorm", "goland"]','security@jetbrains.com','https://www.jetbrains.com/security/',NULL,1,0.8,NULL,NULL,NULL,NULL,0.0,0.0,NULL,'36c71fba8433481a99a45f2ca9bb7409','2025-09-09 16:21:07','2025-09-09 16:21:07');
CREATE TABLE reference (
	url VARCHAR(1000) NOT NULL, 
	title VARCHAR(500), 
	description TEXT, 
	reference_type VARCHAR(15) NOT NULL, 
	source_domain VARCHAR(200), 
	author VARCHAR(200), 
	publication_date VARCHAR(100), 
	credibility_score VARCHAR(5), 
	relevance_score VARCHAR(5), 
	last_checked VARCHAR(100), 
	is_accessible VARCHAR(20), 
	id UUID NOT NULL, 
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE vulnerability_tool_association (
	vulnerability_id UUID NOT NULL, 
	tool_id UUID NOT NULL, 
	PRIMARY KEY (vulnerability_id, tool_id), 
	FOREIGN KEY(vulnerability_id) REFERENCES vulnerability (id), 
	FOREIGN KEY(tool_id) REFERENCES aitool (id)
);
INSERT INTO "vulnerability_tool_association" VALUES('cdda6b1ce35544ce892d0517cb8c5a9e','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('367e7754661047139e82d4289979b607','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('7cfdb830692e455fa79092d347e3f8eb','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('02a1984f8f524b8bade2751fb6c00b30','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('cdda6b1ce35544ce892d0517cb8c5a9e','fa9485abaa1a48a99a1f469df5c9c8fe');
INSERT INTO "vulnerability_tool_association" VALUES('02a1984f8f524b8bade2751fb6c00b30','fa9485abaa1a48a99a1f469df5c9c8fe');
INSERT INTO "vulnerability_tool_association" VALUES('cdda6b1ce35544ce892d0517cb8c5a9e','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('92f8b1c04c4a4ec9b8d18059ebb79320','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('7cfdb830692e455fa79092d347e3f8eb','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('367e7754661047139e82d4289979b607','f06da20a50944abda8b576395b61cfb6');
INSERT INTO "vulnerability_tool_association" VALUES('7cfdb830692e455fa79092d347e3f8eb','f06da20a50944abda8b576395b61cfb6');
INSERT INTO "vulnerability_tool_association" VALUES('02a1984f8f524b8bade2751fb6c00b30','f06da20a50944abda8b576395b61cfb6');
INSERT INTO "vulnerability_tool_association" VALUES('92f8b1c04c4a4ec9b8d18059ebb79320','36c71fba8433481a99a45f2ca9bb7409');
INSERT INTO "vulnerability_tool_association" VALUES('367e7754661047139e82d4289979b607','7c497c23b209482bb5add74a9e20694b');
INSERT INTO "vulnerability_tool_association" VALUES('7cfdb830692e455fa79092d347e3f8eb','7c497c23b209482bb5add74a9e20694b');
INSERT INTO "vulnerability_tool_association" VALUES('02a1984f8f524b8bade2751fb6c00b30','7c497c23b209482bb5add74a9e20694b');
INSERT INTO "vulnerability_tool_association" VALUES('c7d9526a8cbe4c42bdf119b1eac84369','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('cc1c92c9a30e41728354086f4db1c048','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('e05f51493cec4ca3b68d413a45ba92cf','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('5a7aa625adf241a68129454bfa8b8a76','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('221d89a25b6e46a58f5efcbaafe33f6e','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('e05f51493cec4ca3b68d413a45ba92cf','6fd771363de04be2a7119b37c35320a2');
INSERT INTO "vulnerability_tool_association" VALUES('ce67f70889d840f6809d1c9fecdc33c5','6fd771363de04be2a7119b37c35320a2');
INSERT INTO "vulnerability_tool_association" VALUES('c7d9526a8cbe4c42bdf119b1eac84369','fa9485abaa1a48a99a1f469df5c9c8fe');
INSERT INTO "vulnerability_tool_association" VALUES('0cdbc1188e6c44d1ac3eeb689ce7d63a','fa9485abaa1a48a99a1f469df5c9c8fe');
INSERT INTO "vulnerability_tool_association" VALUES('221d89a25b6e46a58f5efcbaafe33f6e','fa9485abaa1a48a99a1f469df5c9c8fe');
INSERT INTO "vulnerability_tool_association" VALUES('ce67f70889d840f6809d1c9fecdc33c5','fa9485abaa1a48a99a1f469df5c9c8fe');
INSERT INTO "vulnerability_tool_association" VALUES('0cdbc1188e6c44d1ac3eeb689ce7d63a','22c9cbe320884bb59f41434c9d426d25');
INSERT INTO "vulnerability_tool_association" VALUES('695f65d541344bb29b2becbfa53657e5','36c71fba8433481a99a45f2ca9bb7409');
INSERT INTO "vulnerability_tool_association" VALUES('ae9371f7a6f04693978f6fd0976726f8','36c71fba8433481a99a45f2ca9bb7409');
INSERT INTO "vulnerability_tool_association" VALUES('c7d9526a8cbe4c42bdf119b1eac84369','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('cc1c92c9a30e41728354086f4db1c048','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('e05f51493cec4ca3b68d413a45ba92cf','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('fe5107fb4949407da618b5494e7a40e1','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('71e1d84def4d41878f8969c9f153fcd8','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('f78e8edabba349c89181cce486369268','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('4a00f2bcc6e74baf9844b64a7bffdffa','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('c7b60169277641ef976394fba9f361d8','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('0a5f61a02f6b4865b2150c921bf594fb','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('b86623e53390428c8fc120fa87be33e7','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('5d2900964aa5414fa5144b73ca7cc46e','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('4c9e186900a04869b1b08cdaeb42cce6','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('8373884e5bae49278bcf45dbf4cce7a7','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('29cf6414bdfc4cbcbcfb819a3e07d072','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('3e346575a60948218e94851cf4889953','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('5e3eb01d22fa4739829434c48f2b09e0','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('40d6ba8b7e024ded9ac66dac13c2ebc3','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('40d6ba8b7e024ded9ac66dac13c2ebc3','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('b63aae43d0814051a4994cff2de719ee','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('e427b44def944742add8849d0737b3ea','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('047cb8c68d6d4b10a927bf145662df04','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('838b30deef264f8ea5a8164082adcd8c','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('838b30deef264f8ea5a8164082adcd8c','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('838b30deef264f8ea5a8164082adcd8c','fa9485abaa1a48a99a1f469df5c9c8fe');
INSERT INTO "vulnerability_tool_association" VALUES('d5c8c90fe6be4d028f827f82e4d5973d','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('41e8e78b717c43dca9fa2a8d102da1bf','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('caeb9fcb84104aebae90c602a27b7a23','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('a4463930aaf44a66ab4a3515cdadff14','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('8abd22db150a4a7bbff31593c67100ef','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('cf74ce3968a54525b3fd3b5db51bae36','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('271bedd2722c4f3cb164778db4920f5b','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('707853d0215046c086faab0ae77c9dae','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('3c2555b78a25433a939651df4f6b7508','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('03be600d56ac4d798646900312d061d2','36c71fba8433481a99a45f2ca9bb7409');
INSERT INTO "vulnerability_tool_association" VALUES('a1e3f8ef36fd455aa2cd6a26ff228ae9','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('3103fe44841d44abbc0daf8ec9675753','36c71fba8433481a99a45f2ca9bb7409');
INSERT INTO "vulnerability_tool_association" VALUES('a2a0851dfe014fd1ac2def597cbfa754','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('fa96c24da9f5449eaec0bd60defa3536','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('55687bc69ee9457582b6cc14d8bc6b93','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('8dce0c8297f6474aa0eed186c72b0017','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('cdcb442ee1344220bb80293486c5328f','36c71fba8433481a99a45f2ca9bb7409');
INSERT INTO "vulnerability_tool_association" VALUES('2de34c956bc14bb8a58203116e5ed9bd','7c497c23b209482bb5add74a9e20694b');
INSERT INTO "vulnerability_tool_association" VALUES('db0ff7f6b8834d2a9fd71c14d4df1a9a','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('1de49dee777a4ccd866b1761f951d71f','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('353a8f6545c046a0be71fae46be2fe61','36c71fba8433481a99a45f2ca9bb7409');
INSERT INTO "vulnerability_tool_association" VALUES('8d065dfbbe4b4cc79fd9cbb5325ecef5','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('ab5bcbf7779f40acb58123d2ff4571f2','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('227a5086bfc8421e9ea34c2ffef77817','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('7586006828f34ef1ae8cc4a9a7b1bb3d','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('820c2e4846ad4277b70796690389c36c','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('53225516c829437889be6ca16fd39b4e','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('5dab48bbdaa54f3aafc1e173c58ab688','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('34b7ff5e37094602a8da605dd24e076a','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('3d02853a9cc54078b93cb13c295116bd','36c71fba8433481a99a45f2ca9bb7409');
INSERT INTO "vulnerability_tool_association" VALUES('d751b472207e4bcd8f4fb14641286cdd','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('d751b472207e4bcd8f4fb14641286cdd','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('d751b472207e4bcd8f4fb14641286cdd','fa9485abaa1a48a99a1f469df5c9c8fe');
INSERT INTO "vulnerability_tool_association" VALUES('4e0ce27ff4b14570b295e09ecbb5740f','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('32995296168d45598ce75bcef4d97c8b','36c71fba8433481a99a45f2ca9bb7409');
INSERT INTO "vulnerability_tool_association" VALUES('3d20d8643b694862aeff1bdd4749f023','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('3d20d8643b694862aeff1bdd4749f023','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('3d20d8643b694862aeff1bdd4749f023','fa9485abaa1a48a99a1f469df5c9c8fe');
INSERT INTO "vulnerability_tool_association" VALUES('9b66bb97-5c56-4169-8035-54f72d34ffae','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('b2578ada-d913-4fe1-8e74-5549106b124c','36c71fba8433481a99a45f2ca9bb7409');
INSERT INTO "vulnerability_tool_association" VALUES('8a650725-1bd0-46c4-9d09-d2f39991f9a7','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('8a650725-1bd0-46c4-9d09-d2f39991f9a7','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('8a650725-1bd0-46c4-9d09-d2f39991f9a7','fa9485abaa1a48a99a1f469df5c9c8fe');
INSERT INTO "vulnerability_tool_association" VALUES('c4aecc78-0982-4a15-81eb-e94f8d37f141','a546e64478084fbabfb40aad2239f171');
INSERT INTO "vulnerability_tool_association" VALUES('18b61e83-1ac1-4a8f-ab7e-f22476b30b1c','36c71fba8433481a99a45f2ca9bb7409');
INSERT INTO "vulnerability_tool_association" VALUES('d7e8641d-350a-4703-8366-36bdde691d75','39adefe393a640f6aab388a58a7b5a91');
INSERT INTO "vulnerability_tool_association" VALUES('d7e8641d-350a-4703-8366-36bdde691d75','fa9485abaa1a48a99a1f469df5c9c8fe');
INSERT INTO "vulnerability_tool_association" VALUES('d7e8641d-350a-4703-8366-36bdde691d75','a546e64478084fbabfb40aad2239f171');
CREATE TABLE remediation (
	vulnerability_id UUID NOT NULL, 
	remediation_type VARCHAR(17) NOT NULL, 
	status VARCHAR(14) NOT NULL, 
	title VARCHAR(200) NOT NULL, 
	description TEXT NOT NULL, 
	code_changes TEXT, 
	configuration_changes JSON, 
	dependencies JSON, 
	kirin_policy_id VARCHAR(100), 
	auto_applicable BOOLEAN, 
	validation_test TEXT, 
	rollback_instructions TEXT, 
	effectiveness_score VARCHAR(5), 
	complexity_level VARCHAR(20), 
	estimated_time VARCHAR(50), 
	side_effects TEXT, 
	success_rate VARCHAR(5), 
	times_applied VARCHAR(10), 
	id UUID NOT NULL, 
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(vulnerability_id) REFERENCES vulnerability (id)
);
CREATE TABLE alert (
	vulnerability_id UUID NOT NULL, 
	alert_type VARCHAR(17) NOT NULL, 
	priority VARCHAR(8) NOT NULL, 
	status VARCHAR(12) NOT NULL, 
	title VARCHAR(500) NOT NULL, 
	message TEXT NOT NULL, 
	summary TEXT, 
	target_audience JSON, 
	channels JSON, 
	scheduled_time DATETIME, 
	sent_time DATETIME, 
	acknowledged_time DATETIME, 
	trigger_conditions JSON, 
	suppression_rules JSON, 
	retry_count VARCHAR(5), 
	last_retry DATETIME, 
	delivery_failures JSON, 
	open_rate VARCHAR(5), 
	click_rate VARCHAR(5), 
	is_automated BOOLEAN, 
	correlation_id VARCHAR(100), 
	id UUID NOT NULL, 
	created_at DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	updated_at DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(vulnerability_id) REFERENCES vulnerability (id)
);
CREATE INDEX ix_vulnerability_cve_id ON vulnerability (cve_id);
CREATE UNIQUE INDEX ix_vulnerability_vulnerability_id ON vulnerability (vulnerability_id);
CREATE INDEX ix_vulnerability_severity ON vulnerability (severity);
CREATE UNIQUE INDEX ix_aitool_name ON aitool (name);
COMMIT;

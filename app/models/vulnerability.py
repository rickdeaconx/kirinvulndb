from sqlalchemy import Column, String, Text, Float, Boolean, DateTime, JSON, Enum, ForeignKey, Table
from sqlalchemy.orm import relationship
from .base import UUID_TYPE
from .base import Base
import enum
from datetime import datetime
from typing import Optional, List, Dict


class SeverityEnum(str, enum.Enum):
    CRITICAL = "CRITICAL"
    HIGH = "HIGH"
    MEDIUM = "MEDIUM" 
    LOW = "LOW"
    INFO = "INFO"


class PatchStatusEnum(str, enum.Enum):
    UNPATCHED = "unpatched"
    PATCH_AVAILABLE = "patch_available"
    PATCHED = "patched"
    WONT_FIX = "wont_fix"


class AttackVectorEnum(str, enum.Enum):
    RCE = "rce"
    XSS = "xss"
    INJECTION = "injection"
    PRIVILEGE_ESCALATION = "privilege_escalation"
    PROMPT_INJECTION = "prompt_injection"
    DATA_EXFILTRATION = "data_exfiltration"
    MODEL_POISONING = "model_poisoning"
    BACKDOOR = "backdoor"


# Association table for many-to-many relationship between vulnerabilities and AI tools
vulnerability_tool_association = Table(
    'vulnerability_tool_association',
    Base.metadata,
    Column('vulnerability_id', UUID_TYPE, ForeignKey('vulnerability.id'), primary_key=True),
    Column('tool_id', UUID_TYPE, ForeignKey('aitool.id'), primary_key=True)
)


class Vulnerability(Base):
    """Core vulnerability model"""
    __tablename__ = "vulnerability"
    
    # Basic identification
    vulnerability_id = Column(String(255), unique=True, nullable=False, index=True)
    cve_id = Column(String(50), nullable=True, index=True)
    title = Column(String(500), nullable=False)
    description = Column(Text, nullable=False)
    
    # Severity and scoring
    severity = Column(Enum(SeverityEnum), nullable=False, index=True)
    cvss_score = Column(Float, nullable=True)
    cvss_vector = Column(String(200), nullable=True)
    
    # Temporal information
    discovery_date = Column(DateTime(timezone=True), nullable=False)
    public_disclosure = Column(DateTime(timezone=True), nullable=True)
    first_seen_timestamp = Column(DateTime(timezone=True), nullable=False, default=datetime.utcnow)
    last_updated_timestamp = Column(DateTime(timezone=True), nullable=False, default=datetime.utcnow)
    
    # Technical details
    attack_vectors = Column(JSON, nullable=False, default=[])
    technical_details = Column(Text, nullable=True)
    impact_assessment = Column(Text, nullable=True)
    
    # Patch and remediation
    patch_status = Column(Enum(PatchStatusEnum), nullable=False, default=PatchStatusEnum.UNPATCHED)
    remediation_steps = Column(Text, nullable=True)
    affected_versions = Column(JSON, nullable=True)  # {tool_name: [versions]}
    fixed_versions = Column(JSON, nullable=True)     # {tool_name: [versions]}
    
    # Threat intelligence
    poc_available = Column(Boolean, default=False)
    exploit_in_wild = Column(Boolean, default=False)
    exploit_maturity = Column(String(50), nullable=True)  # proof-of-concept, functional, high, not-defined
    
    # Metadata
    tags = Column(JSON, default=[])
    references = Column(JSON, default=[])  # URLs to references
    source = Column(String(100), nullable=False)  # nvd, vendor, community, etc.
    confidence_score = Column(Float, default=1.0)  # 0.0 to 1.0
    
    # Kirin-specific fields
    kirin_remediation_available = Column(Boolean, default=False)
    kirin_policy_mappings = Column(JSON, nullable=True)
    auto_remediation_possible = Column(Boolean, default=False)
    
    # Search and classification
    cwe_ids = Column(JSON, default=[])  # Common Weakness Enumeration
    owasp_category = Column(String(100), nullable=True)
    mitre_techniques = Column(JSON, default=[])
    
    # Many-to-many relationship with AI tools
    affected_tools = relationship(
        "AITool",
        secondary=vulnerability_tool_association,
        back_populates="vulnerabilities"
    )
    
    # One-to-many relationships
    remediations = relationship("Remediation", back_populates="vulnerability", cascade="all, delete-orphan")
    alerts = relationship("Alert", back_populates="vulnerability", cascade="all, delete-orphan")
    
    def __repr__(self):
        return f"<Vulnerability(id={self.vulnerability_id}, severity={self.severity}, title={self.title[:50]})>"
    
    @property
    def is_critical(self) -> bool:
        return self.severity == SeverityEnum.CRITICAL
    
    @property
    def is_zero_day(self) -> bool:
        return self.patch_status == PatchStatusEnum.UNPATCHED and self.exploit_in_wild
    
    def to_dict(self) -> Dict:
        """Convert to dictionary for API responses"""
        return {
            "id": str(self.id),
            "vulnerability_id": self.vulnerability_id,
            "cve_id": self.cve_id,
            "title": self.title,
            "description": self.description,
            "severity": self.severity.value,
            "cvss_score": self.cvss_score,
            "cvss_vector": self.cvss_vector,
            "discovery_date": self.discovery_date.isoformat() if self.discovery_date else None,
            "public_disclosure": self.public_disclosure.isoformat() if self.public_disclosure else None,
            "first_seen_timestamp": self.first_seen_timestamp.isoformat() if self.first_seen_timestamp else None,
            "last_updated_timestamp": self.last_updated_timestamp.isoformat() if self.last_updated_timestamp else None,
            "attack_vectors": [av.value if hasattr(av, 'value') else av for av in self.attack_vectors] if self.attack_vectors else [],
            "technical_details": self.technical_details,
            "impact_assessment": self.impact_assessment,
            "patch_status": self.patch_status.value,
            "remediation_steps": self.remediation_steps,
            "affected_versions": self.affected_versions,
            "fixed_versions": self.fixed_versions,
            "poc_available": self.poc_available,
            "exploit_in_wild": self.exploit_in_wild,
            "exploit_maturity": self.exploit_maturity,
            "tags": self.tags,
            "references": self.references,
            "source": self.source,
            "confidence_score": self.confidence_score,
            "kirin_remediation_available": self.kirin_remediation_available,
            "kirin_policy_mappings": self.kirin_policy_mappings,
            "auto_remediation_possible": self.auto_remediation_possible,
            "cwe_ids": self.cwe_ids,
            "owasp_category": self.owasp_category,
            "mitre_techniques": self.mitre_techniques,
            "affected_tools": [tool.name for tool in self.affected_tools],
            "created_at": self.created_at.isoformat(),
            "updated_at": self.updated_at.isoformat()
        }